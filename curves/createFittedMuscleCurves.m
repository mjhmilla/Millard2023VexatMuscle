function [normMuscleCurves,...
          musculotendonPropertiesUpd,...
          sarcomerePropertiesUpd,...
          activeForceLengthCurveAnnotationPoints,...
          dataActiveForceLengthUpd,...
          dataPassiveForceLengthUpd] = createFittedMuscleCurves(...
                      musculotendonProperties,...
                      sarcomereProperties,...            
                      dataActiveForceLength,...
                      dataPassiveForceLength,...
                      shiftLengthActiveForceLengthCurveDescendingCurve,...
                      flag_useFixedLambdaECM,...                      
                      flag_enableNumericallyNonZeroGradients,...
                      smallNumericallyNonZeroNumber,...
                      flag_solveForOptimalFiberLengthOfBestFit,...
                      createMusculoTendonFcn,...
                      flag_useOctave)
%%
% Will create all of the Bezier curves that are needed to simulate both
% Opus31 and 2012 equilibrium muscle model
% 
% @param musculotendonProperties:
%   A struct that contains architectural properties of the muscle along with 
%   some additional mechanical properties. See the current example
%   in parameters/felineSoleus/getFelineSoleusMusculotendonProperties.m
%
% @param sarcomereProperties           
%   A struct that returns the normalized lengths of the various filaments
%   in the sarcomeres of the type of muscle being simulated in addition to
%   some additional properites related to cross bridge stiffness and damping
%   required in Opus31. See the current example in
%   in parameters/felineSoleus/getMammalianSkeletalMuscleNormalizedSarcomereProperties.m
%
% @param dataActiveForceLength
%   An n by two matrix where the first column is normalized fiber length 
%   and the second column is normalized active muscle force. For an example
%   please see
%   parameters/felineSoleus/getFelineSoleusMusculotendonData.m
%
% @param dataPassiveForceLength
%   An n by two matrix where the first column is normalized fiber length 
%   and the second column is normalized passive muscle force. For an example
%   please see
%   parameters/felineSoleus/getFelineSoleusMusculotendonData.m
%
% @param flag_enableNumericallyNonZeroGradients
%   Setting this to 1 will ensure that large curve sections that would otherwise 
%   have a slope of zero (e.g. the part of the active force length curve that is 
%   between 0 and close to 0.5, and is greater than 1.6) will have non-zero a
%   non zero slope with a magnitude equal to smallNumericallyNonZeroNumber.
%   This is particularly useful when using this muscle model in an optimization 
%   routine that does not tolerate gradients of zero.
%
% @param smallNumericallyNonZeroNumber
%   If flag_enableNumericallyNonZeroGradients is set to 1 then all of the
%   sections of the curves that would other wise have a slope of zero will
%   have a slope that is set to the value here. I recommend a value that
%   is for practical terms zero, but is greater than the tolerance used on 
%   the optimization problem.
%
%
% @param flag_solveForOptimalFiberLengthOfBestFit
%         When set to 1 an optimization run will be made in which the
%         optimal fiber length is scaled so that the distance between
%         the active force length curve and the normalized active 
%         force length data is minimized.
%
% @param createMusculoTendonFcn
%         A function that takes the arguments scaleFiberLength and
%         scaleMaximumIsometricTension and returns 4 structures:
%         musculotendonProperties, sarcomereProperties,
%         activeForceLengthData, and passiveForceLengthData.
%      
% @param flag_useOctave
%   Setting this to 1 will ensure that no parts of the code that are 
%   incompatible with octave are called.
%
% @return structs 
%   normMuscleCurves with these fields
%     activeForceLengthCurve,
%     fiberForceVelocityCurve
%     fiberForceLengthCurve
%     forceLengthECMHalfCurve
%     forceLengthIgPCurve
%     forceLengthPevkIgDCurve
%     tendonForceLengthCurve
%     tendonDampingLengthCurve
%
% sarcomerePropertiesUpd
%   identical to the sarcomere properties struct except in the case
%   when dataPassiveForceLength is not empty: in this case the field
%   extraCellularMatrixPassiveForceFraction has been updated so that
%   the combined passive forces developed by the ECM and titin
%   fit the passive force length curve data as closely as possible.
%%
    
% Note
%  These curves are really in here just for plotting purposes: the model
%  does not use them.
%
%  forceLengthIgpCurveHuman
%  forceLengthPevkIgdCurveHuman
%  forceLengthIgpCurveHumanB
%  forceLengthPevkIgdCurveHumanB

normMuscleCurves = struct('activeForceLengthCurve' ,            [],...
                          'fiberForceVelocityCurve',            [],...
                          'activeForceLengthCalibratedCurve' ,  [],...
                          'fiberForceVelocityCalibratedCurve',  [],...
                          'useCalibratedCurves',0,...
                          'fiberForceLengthCurve'  ,        [],...
                          'forceLengthECMHalfCurve',        [],...
                          'forceLengthProximalTitinCurve',  [],...
                          'forceLengthDistalTitinCurve',    [],...
                          'forceLengthProximalTitinInverseCurve',  [],...
                          'forceLengthDistalTitinInverseCurve',    [],...
                          'forceLengthIgpCurve',            [],...
                          'forceLengthPevkIgdCurve',        [],...
                          'forceLengthIgpCurveB',            [],...
                          'forceLengthPevkCurveB',        [],...
                          'useTitinCurvesWithRigidIgDSegment', 0,...
                          'forceLengthIgpCurveHuman',       [],...
                          'forceLengthPevkIgdCurveHuman',   [],...
                          'forceLengthIgpCurveHumanB',      [],...
                          'forceLengthPevkIgdCurveHumanB',  [],...
                          'forceLengthProximalTitinCurveHuman',  [],...
                          'forceLengthDistalTitinCurveHuman',    [],...
                          'forceLengthProximalTitinInverseCurveHuman',  [],...
                          'forceLengthDistalTitinInverseCurveHuman',    [],...
                          'fiberForceVelocityInverseCurve', [],...
                          'fiberForceVelocityCalibratedInverseCurve',[],...
                          'fiberForceLengthInverseCurve'  , [],...
                          'forceLengthECMHalfInverseCurve', [],...
                          'forceLengthIgpInverseCurve',     [],...
                          'forceLengthPevkIgdInverseCurve', [],...
                          'forceLengthIgpCurveBInverseCurve',  [],...
                          'forceLengthPevkCurveBInverseCurve', [],...
                          'tendonForceLengthCurve',         [],...
                          'tendonForceLengthInverseCurve',  []);

                        
curvinessActiveForceLength = 1.;                        
%%
%
% Scale the fiber length and maximum isometric force such that the
% active force length curve fits the data as closely as possible.
%%
                        
if(flag_solveForOptimalFiberLengthOfBestFit==1)
  x0 = [1.];
  errFcn = @(argX)calcScalingError(argX,createMusculoTendonFcn,...
                                        curvinessActiveForceLength,...
                                        flag_enableNumericallyNonZeroGradients,...
                                        smallNumericallyNonZeroNumber,...                                        
                                        flag_useOctave);
  A   = [];
  B   = [];
  Aeq = [];
  Beq = [];
  lb  = [0.5];
  ub  = [1.5];  
                                      
  [x,fval,exitflag]=fmincon( errFcn, x0, A,B,Aeq,Beq,lb,ub);

  assert(exitflag==1);
    
  scaleOptimalFiberLength       = x(1,1);
  scaleMaximumIsometricTension  = 1;
  
  [musculotendonProperties, ...
   sarcomereProperties,...
   dataActiveForceLength,...
   dataPassiveForceLength] = ...
      createMusculoTendonFcn(scaleOptimalFiberLength,...
                             scaleMaximumIsometricTension);
  
end

     
musculotendonPropertiesUpd = musculotendonProperties;
sarcomerePropertiesUpd     = sarcomereProperties;   
dataActiveForceLengthUpd   = dataActiveForceLength;
dataPassiveForceLengthUpd  = dataPassiveForceLength;

%%
% 
% Active-force-length curve:
%   :Build using sarcomere geometry. For now do not fit it
%%

fprintf('Building default curves ... \n')

flag_compensateForCrossbridgeStiffness = 0;
[normMuscleCurves.activeForceLengthCurve, ...
  activeForceLengthCurveAnnotationPoints] ...
    = createFiberActiveForceLengthCurve(...
          sarcomereProperties.normMyosinHalfLength*2,...
          sarcomereProperties.normMyosinBareHalfLength*2,...
          sarcomereProperties.normActinLength,...
          sarcomereProperties.normZLineLength,...
          sarcomereProperties.normSarcomereLengthZeroForce,...
          sarcomereProperties.normCrossBridgeStiffness,...          
          curvinessActiveForceLength, ...           
          shiftLengthActiveForceLengthCurveDescendingCurve,...
          flag_compensateForCrossbridgeStiffness,...          
          flag_enableNumericallyNonZeroGradients,...
          smallNumericallyNonZeroNumber,...
          musculotendonProperties.name,...
          flag_useOctave);  

fprintf('  activeForceLengthCurve created\n');

flag_compensateForCrossbridgeStiffness = 1;
[normMuscleCurves.activeForceLengthCalibratedCurve, ...
  activeForceLengthCurveAnnotationPointsCal] ...
    = createFiberActiveForceLengthCurve(...
          sarcomereProperties.normMyosinHalfLength*2,...
          sarcomereProperties.normMyosinBareHalfLength*2,...
          sarcomereProperties.normActinLength,...
          sarcomereProperties.normZLineLength,...
          sarcomereProperties.normSarcomereLengthZeroForce,...
          sarcomereProperties.normCrossBridgeStiffness,...          
          curvinessActiveForceLength, ...           
          shiftLengthActiveForceLengthCurveDescendingCurve,...
          flag_compensateForCrossbridgeStiffness,...          
          flag_enableNumericallyNonZeroGradients,...
          smallNumericallyNonZeroNumber,...
          musculotendonProperties.name,...
          flag_useOctave);  


fprintf('  activeForceLengthCalibratedCurve created\n');
%%
% 
% Force Velocity Curve
%
%%

curvinessEccentricForceVelocity = 0.9;
normMuscleCurves.fiberForceVelocityCurve ...
  = createFiberForceVelocityCurve(...
      musculotendonProperties.forceVelocityMultiplierAtHalfMaximumFiberVelocity,...
      musculotendonProperties.forceVelocityMultiplierAtLowEccentricFiberVelocity,...
      musculotendonProperties.forceVelocityMultiplierAtMaximumEccentricFiberVelocity,...
      curvinessEccentricForceVelocity,...
      flag_enableNumericallyNonZeroGradients,...
      smallNumericallyNonZeroNumber,...
      musculotendonProperties.name,...
      flag_useOctave);
fprintf('  fiberForceVelocityCurve created\n'); 

normMuscleCurves.fiberForceVelocityInverseCurve = ...
  createInverseCurve(normMuscleCurves.fiberForceVelocityCurve);
fprintf('  fiberForceVelocityInverseCurve created\n');


normMuscleCurves.fiberForceVelocityCalibratedCurve = ...
normMuscleCurves.fiberForceVelocityCurve;


normMuscleCurves.fiberForceVelocityCalibratedCurve.xpts = ...
  normMuscleCurves.fiberForceVelocityCalibratedCurve.xpts ...
  .*sarcomereProperties.forceVelocityCalibrationFactor;

normMuscleCurves.fiberForceVelocityCalibratedCurve.xEnd = ...
  normMuscleCurves.fiberForceVelocityCalibratedCurve.xEnd ...
  .*sarcomereProperties.forceVelocityCalibrationFactor;

normMuscleCurves.fiberForceVelocityCalibratedCurve.dydxEnd = ...
  normMuscleCurves.fiberForceVelocityCalibratedCurve.dydxEnd ...
  ./sarcomereProperties.forceVelocityCalibrationFactor;

fprintf('  fiberForceVelocityCalibratedCurve created\n'); 

normMuscleCurves.fiberForceVelocityCalibratedInverseCurve = ...
  createInverseCurve(normMuscleCurves.fiberForceVelocityCalibratedCurve);
fprintf('  fiberForceVelocityCalibratedInverseCurve created\n');

%%
%
% Passive force length curve:
%   fit it to data, if its available. Otherwise use plausible defaults
%%
forceLengthCurveSettings = struct('normLengthZero',0,'normLengthToe',0,'fToe',0,...
                                  'kZero',0,'kToe',0,'curviness',0);

if(isempty(dataPassiveForceLength) == 0)

  normLengthZero           = 1.0; 
  normLengthToe            = 1.7;
  kZero           = 0;
  
  if(flag_enableNumericallyNonZeroGradients)
    kZero = smallNumericallyNonZeroNumber;
  end         
  
  kLow            = 0.2;
  kNum            = 2;
  kToe            = kNum/(normLengthToe-normLengthZero);
  curviness       = 0.75;
  xshift          = 1.0;
  xwidth          = 0.7;
  problemScaling  = 1000;
  params0         = [xshift  , xwidth].*problemScaling;
  paramsLB        = [0.6    ;    0.4].*problemScaling;
  paramsUB        = [1.4     ;   1.50].*problemScaling;
  
  fixedParams = [kLow,kNum,kZero,curviness];

  errFcn = @(argX)calcFittedFiberForceLengthCurveError(argX,...
                   dataPassiveForceLength,problemScaling,...
                   fixedParams,flag_useOctave);
  
               
  err0 = errFcn(params0);
  lsqOptions = optimoptions('lsqnonlin','Display','off',...
      'FinDiffType','central');
  x    = lsqnonlin(errFcn,params0,paramsLB,paramsUB,lsqOptions);
  err1 = errFcn(x);

  fprintf('  forceLengthCurve fitted, error reduced from %1.2e - %1.2e\n',...
          norm(err0),norm(err1));
  
  xshift    = x(1)/problemScaling;
  xwidth    = x(2)/problemScaling;
  normLengthZero = xshift;
  normLengthToe  = xshift + xwidth;
  kToe      = kNum/(normLengthToe-normLengthZero);
  fToe      = 1;
  curviness = 0.75;

  assert( kZero < kLow );
  
  flag_computeIntegral = 1;
  normMuscleCurves.fiberForceLengthCurve = ...
    createFiberForceLengthCurve2021(normLengthZero,...
                                normLengthToe,...
                                fToe,...
                                kZero,...
                                kLow,...
                                kToe,...
                                curviness,...
                                flag_computeIntegral,...
                                musculotendonProperties.name,...
                                flag_useOctave);
                              
  forceLengthCurveSettings.normLengthZero = normLengthZero;
  forceLengthCurveSettings.normLengthToe  = normLengthToe;
  forceLengthCurveSettings.fToe           = fToe;
  forceLengthCurveSettings.kZero = kZero;
  forceLengthCurveSettings.kLow  = kLow;
  forceLengthCurveSettings.kToe  = kToe;
  forceLengthCurveSettings.curviness = curviness;
    
else  

  normLengthZero = 1+0; 
  normLengthToe  = 1+0.6;
  fToe  = 1;
  kZero = 0;
  if(flag_enableNumericallyNonZeroGradients)
    kZero = smallNumericallyNonZeroNumber;
  end         
  kLow  = 0.2;
  kToe  = 2/(normLengthToe-normLengthZero);
  curviness = 0.75;  
  flag_computeIntegral = 1;
  normMuscleCurves.fiberForceLengthCurve = ...
    createFiberForceLengthCurve2021(normLengthZero,...
                                normLengthToe,...
                                fToe,...
                                kZero,...
                                kLow,...
                                kToe,...
                                curviness,...
                                flag_computeIntegral,...
                                musculotendonProperties.name,...
                                flag_useOctave);                 
                              
  forceLengthCurveSettings.normLengthZero = normLengthZero;
  forceLengthCurveSettings.normLengthToe  = normLengthToe;
  forceLengthCurveSettings.fToe  = fToe;
  forceLengthCurveSettings.kZero = kZero;
  forceLengthCurveSettings.kLow  = kLow;
  forceLengthCurveSettings.kToe  = kToe;
  forceLengthCurveSettings.curviness = curviness;
                             
                              
end     



fprintf('  fiberForceLengthInverseCurve created\n');
normMuscleCurves.fiberForceLengthInverseCurve = ...
      createInverseCurve(normMuscleCurves.fiberForceLengthCurve);

%%
%
%   Titin curves and extracellular matrix curves
%     :If passive force-length data exists, solve for the minimum permissable 
%      value for the ECM fraction that results in a set of passive curves for 
%      the ECM and titin that:
%
%     1. Can reproduce the passive force length curve data
%     2. With curves for the IgP and PEVK regions that are plausible 
%
%%
fprintf('  ecm & titin curves:\n');
%flag_useFixedLambdaECM=1;

flag_useDeprecatedTitinCurves = 0;
if(flag_useDeprecatedTitinCurves==0)
  
flag_computeCurveIntegrals=1;
flag_computeIntegral=1;
  
lambdaECM = sarcomereProperties.extraCellularMatrixPassiveForceFraction;    
normMuscleCurves.forceLengthECMHalfCurve  = ...
  createFiberForceLengthCurve2021((forceLengthCurveSettings.normLengthZero)*0.5,...
                              (forceLengthCurveSettings.normLengthToe)*0.5,...
                              lambdaECM,...
                              forceLengthCurveSettings.kZero*(lambdaECM*2),...
                              forceLengthCurveSettings.kLow*(lambdaECM*2),...
                              forceLengthCurveSettings.kToe*(lambdaECM*2),...
                              forceLengthCurveSettings.curviness,...
                              flag_computeCurveIntegrals,...
                              musculotendonProperties.name,...
                              flag_useOctave);  

normMuscleCurves.forceLengthECMHalfCurve.name = sprintf('%s.%s',...
  musculotendonProperties.name,'forceLengthECMHalfCurve');
fprintf('    forceLengthECMHalfCurve created\n');

normMuscleCurves.forceLengthECMHalfInverseCurve = ...
      createInverseCurve(normMuscleCurves.forceLengthECMHalfCurve); 
fprintf('    forceLengthECMHalfInverseCurve created\n');

%%
% Titin curves in which some part of the PEVK segment attaches to actin.
% The location of the attachment point is set by 
%   sarcomereProperties.normPevkToActinAttachmentPoint
% where
% 0: Means the N2A epitope attaches
% 1: Means the border between the PEKV/IgD segment attaches
%%

flag_useElasticIgD=1;
flag_useHumanIgDGeometry=0;

[normMuscleCurves.forceLengthProximalTitinCurve,...
 normMuscleCurves.forceLengthProximalTitinInverseCurve,...
 normMuscleCurves.forceLengthDistalTitinCurve,...
 normMuscleCurves.forceLengthDistalTitinInverseCurve] ...
          = createTitinCurves2022( normMuscleCurves.fiberForceLengthCurve,...
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_useHumanIgDGeometry,...
                                   flag_useOctave); 
flag_useElasticIgD=1;
flag_useHumanIgDGeometry=1;

[normMuscleCurves.forceLengthProximalTitinCurveHuman,...
 normMuscleCurves.forceLengthProximalTitinInverseCurveHuman,...
 normMuscleCurves.forceLengthDistalTitinCurveHuman,...
 normMuscleCurves.forceLengthDistalTitinInverseCurveHuman] ...
          = createTitinCurves2022( normMuscleCurves.fiberForceLengthCurve,...
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_useHumanIgDGeometry,...
                                   flag_useOctave); 

%%
% Titin curves in which the N2A epitope attaches to actin
%%
flag_useElasticIgD=1;
flag_useHumanIgDGeometry=0;

[normMuscleCurves.forceLengthIgpCurve,...
 normMuscleCurves.forceLengthIgpInverseCurve,...
 normMuscleCurves.forceLengthPevkIgdCurve,...
 normMuscleCurves.forceLengthPevkIgdInverseCurve] ...
          = createTitinCurves2021( normMuscleCurves.fiberForceLengthCurve,...
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_useHumanIgDGeometry,...
                                   flag_useOctave);  
flag_useElasticIgD=0;
flag_useHumanIgDGeometry=0;

[normMuscleCurves.forceLengthIgpCurveB,...
 normMuscleCurves.forceLengthIgpInverseCurveB,...
 normMuscleCurves.forceLengthPevkCurveB,...
 normMuscleCurves.forceLengthPevkInverseCurveB] ...
          = createTitinCurves2021( normMuscleCurves.fiberForceLengthCurve,...
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_useHumanIgDGeometry,...
                                   flag_useOctave); 

flag_useElasticIgD=1;
flag_useHumanIgDGeometry=1;

[normMuscleCurves.forceLengthIgpCurveHuman,...
 normMuscleCurves.forceLengthIgpInverseCurveHuman,...
 normMuscleCurves.forceLengthPevkCurveHuman,...
 normMuscleCurves.forceLengthPevkInverseCurveHuman] ...
          = createTitinCurves2021( normMuscleCurves.fiberForceLengthCurve,...
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_useHumanIgDGeometry,...
                                   flag_useOctave);                                   
                                 
flag_useElasticIgD=0;
flag_useHumanIgDGeometry=1;

[normMuscleCurves.forceLengthIgpCurveHumanB,...
 normMuscleCurves.forceLengthIgpInverseCurveHumanB,...
 normMuscleCurves.forceLengthPevkCurveHumanB,...
 normMuscleCurves.forceLengthPevkInverseCurveHumanB] ...
          = createTitinCurves2021( normMuscleCurves.fiberForceLengthCurve,...
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_useHumanIgDGeometry,...
                                   flag_useOctave);  

 
  
% Rough work to include a fit to a WLC model of the tandem Ig and PEVK
% segments. This is likely more than a full week of work to fully work
% up the model, the fitting routine, and to re-run the experiments. At the
% end of this the outcome will be that the Herzog and Leonard 2002 
% simulations will have a slight up curve during lengthening and the 
% forces developed by titin will sky rocket as the segments approach their
% respective contour lengths. The simplified titin model I've put in is 
% perfectly fine for any typical operating range.
%
% In any case, the steps to include this are:
% 1. Fit Bezier curves to the WLC
% 2. Scale each of the Bezier curves s.t. the lumped titin segment develops
%    the passive faction identified by Prado et al. of the passive force
%    length curve.
% 3. Re-run all simulations, update all plots.
%
% [normMuscleCurves.forceLengthIgpCurveHumanC,...
%  normMuscleCurves.forceLengthIgpInverseCurveHumanC,...
%  normMuscleCurves.forceLengthPevkCurveHumanC,...
%  normMuscleCurves.forceLengthPevkInverseCurveHumanC] ...
%           = constructTitinCurvesFromGeometry(...
%                        normMuscleCurves.fiberForceLengthCurve,...
%                        forceLengthCurveSettings,...
%                        normMuscleCurves.forceLengthECMHalfCurve,...
%                        musculotendonProperties,...
%                        sarcomereProperties,...
%                        musculotendonProperties.name,...
%                        flag_computeCurveIntegrals,...
%                        flag_useElasticIgD,...
%                        flag_useHumanIgDGeometry,...
%                        flag_useOctave);  

  
  
end

if(flag_useDeprecatedTitinCurves==1)
  if(isempty(dataPassiveForceLength)==0 && flag_useFixedLambdaECM==0)
    %Identify the minimum Lambda ECM that will yield a titin-force-length
    %curve that will not exceed the experimental passive-force-length curve
    %AND
    %construct the pevk-igd and igp curves using this value of lambda

    normStiffnessHalfPevkIgd              = ...
      sarcomereProperties.PEVKIGDNormStiffness;

    loptPevkIgd                           = ...
      sarcomereProperties.PEVKNormLengthAtOptimalFiberLength ...
     +sarcomereProperties.IGDFreeNormLengthAtOptimalFiberLength;

    normHalfStiffnessIgp                  = ...
      sarcomereProperties.IGPNormStiffness;

    loptIgp                               = ...
      sarcomereProperties.IGPNormLengthAtOptimalFiberLength;

    normLengthZToT12                      = ...
      sarcomereProperties.ZLineToT12NormLengthAtOptimalFiberLength;

    normLengthIgdFixed = ...
      sarcomereProperties.IGDFixedNormLengthAtOptimalFiberLength;

    normPassiveFiberLengthAtOneNormForce = ...
      calcBezierFcnXGivenY(1.0, normMuscleCurves.fiberForceLengthCurve);    

    [lambdaECMMin,...
     normMuscleCurves.forceLengthPevkIgdCurve,...
     normMuscleCurves.forceLengthIgpCurve] = ...
      solveForMinimumLambdaECM(...
        dataPassiveForceLength, ...
        normStiffnessHalfPevkIgd,...
        loptPevkIgd, ...
        normHalfStiffnessIgp, ...
        loptIgp, ...
        normLengthZToT12, ...
        normLengthIgdFixed,...
        normPassiveFiberLengthAtOneNormForce,...
        flag_useOctave); 
    fprintf('    Solved for min. ECM content: %1.3e\n',lambdaECMMin);
    fprintf('    forceLengthPevkIgdCurve created\n');
    fprintf('    forceLengthIgpCurve created\n');



    normMuscleCurves.forceLengthPevkIgdInverseCurve =...
      createInverseCurve(normMuscleCurves.forceLengthPevkIgdCurve);

    normMuscleCurves.forceLengthIgpInverseCurve =...
      createInverseCurve(normMuscleCurves.forceLengthIgpCurve);

    fprintf('    forceLengthPevkIgdInverseCurve created\n');
    fprintf('    forceLengthIgpInverseCurve created\n');

    normMuscleCurves.forceLengthECMHalfCurve = ...
      fitECMForceLengthCurve(...
          dataPassiveForceLength,...
          normMuscleCurves.fiberForceLengthCurve, ...
          normMuscleCurves.fiberForceLengthInverseCurve, ...
          normMuscleCurves.forceLengthPevkIgdCurve,...
          normMuscleCurves.forceLengthPevkIgdInverseCurve,...
          normMuscleCurves.forceLengthIgpCurve, ...
          normMuscleCurves.forceLengthIgpInverseCurve,...
          sarcomereProperties.ZLineToT12NormLengthAtOptimalFiberLength, ...
          sarcomereProperties.normMyosinHalfLength,...              
          flag_useOctave);  

    fprintf('    forceLengthECMHalfCurve created\n');


    sarcomerePropertiesUpd.extraCellularMatrixPassiveForceFraction ...
        = lambdaECMMin;
    fprintf('    updated sarcomerePropertiesUpd with upd. extraCellular...\n');
    
    fprintf('    forceLengthECMHalfInverseCurve created\n');
    normMuscleCurves.forceLengthECMHalfInverseCurve = ...
          createInverseCurve(normMuscleCurves.forceLengthECMHalfCurve);   
  else

    lambdaECM = sarcomereProperties.extraCellularMatrixPassiveForceFraction;

    normStiffnessHalfPevkIgd              = ...
      sarcomereProperties.PEVKIGDNormStiffness;

    loptPevkIgd                           = ...
      sarcomereProperties.PEVKNormLengthAtOptimalFiberLength ...
     +sarcomereProperties.IGDFreeNormLengthAtOptimalFiberLength;

    normHalfStiffnessIgp                  = ...
      sarcomereProperties.IGPNormStiffness;

    loptIgp                               = ...
      sarcomereProperties.IGPNormLengthAtOptimalFiberLength;

    normLengthZToT12                      = ...
      sarcomereProperties.ZLineToT12NormLengthAtOptimalFiberLength;

    normLengthIgdFixed = ...
      sarcomereProperties.IGDFixedNormLengthAtOptimalFiberLength;

    normPassiveFiberLengthAtOneNormForce = ...
      calcBezierFcnXGivenY(1.0, normMuscleCurves.fiberForceLengthCurve);   


    [normMuscleCurves.forceLengthPevkIgdCurve,...
     normMuscleCurves.forceLengthIgpCurve] = ...
        constructTitinCurves(...
          lambdaECM, ...
          normStiffnessHalfPevkIgd, ...
          loptPevkIgd, ...
          normHalfStiffnessIgp, ...
          loptIgp, ...
          normLengthZToT12, ...
          normLengthIgdFixed,...
          normPassiveFiberLengthAtOneNormForce,... 
          flag_useOctave);


    fprintf('    forceLengthPevkIgdCurve created\n');
    fprintf('    forceLengthIgpCurve created\n');      

    normMuscleCurves.forceLengthPevkIgdInverseCurve =...
      createInverseCurve(normMuscleCurves.forceLengthPevkIgdCurve);

    normMuscleCurves.forceLengthIgpInverseCurve =...
      createInverseCurve(normMuscleCurves.forceLengthIgpCurve);

    fprintf('    forceLengthPevkIgdInverseCurve created\n');  
    fprintf('    forceLengthIgpInverseCurve created\n');

    normMuscleCurves.forceLengthECMHalfCurve = ...
      normMuscleCurves.fiberForceLengthCurve;

    normMuscleCurves.forceLengthECMHalfCurve.xpts = ...
      normMuscleCurves.forceLengthECMHalfCurve.xpts.*0.5;

    normMuscleCurves.forceLengthECMHalfCurve.xEnd = ...
      normMuscleCurves.forceLengthECMHalfCurve.xEnd.*0.5;


    normMuscleCurves.forceLengthECMHalfCurve.ypts = ...
      normMuscleCurves.forceLengthECMHalfCurve.ypts.*lambdaECM;

    normMuscleCurves.forceLengthECMHalfCurve.yEnd = ...
      normMuscleCurves.forceLengthECMHalfCurve.yEnd.*lambdaECM;

    normMuscleCurves.forceLengthECMHalfCurve.dydxEnd = ...
      normMuscleCurves.forceLengthECMHalfCurve.dydxEnd.*lambdaECM;  

    normMuscleCurves.forceLengthECMHalfCurve.d2ydx2End = ...
      normMuscleCurves.forceLengthECMHalfCurve.d2ydx2End.*lambdaECM;  

    fprintf('    forceLengthECMHalfCurve created\n');
    fprintf('    forceLengthECMHalfInverseCurve created\n');
    normMuscleCurves.forceLengthECMHalfInverseCurve = ...
          createInverseCurve(normMuscleCurves.forceLengthECMHalfCurve);    
  end
end




%%
%
% Tendon Force-Length Curve
%
%%
eIso            = musculotendonProperties.tendonStrainAtOneNormForce;
kIso            = 1.375/eIso;
fToe            = 2./3.;
curvinessTendon = 0.5;
computeIntegral = 1;
minimumSlope    = 0;
if(flag_enableNumericallyNonZeroGradients==1)
  minimumSlope = smallNumericallyNonZeroNumber;
end

normMuscleCurves.tendonForceLengthCurve = ...
  createTendonForceLengthCurve2021( eIso, kIso, ...
                                    fToe, curvinessTendon, ...
                                    computeIntegral, ...
                                    flag_enableNumericallyNonZeroGradients,...
                                    smallNumericallyNonZeroNumber,...
                                    musculotendonProperties.name,...
                                    flag_useOctave);
    
fprintf('  tendonForceLengthCurve created\n');
  
normMuscleCurves.tendonForceLengthInverseCurve = ...
  createInverseCurve(normMuscleCurves.tendonForceLengthCurve);

fprintf('  tendonForceLengthInverseCurve created\n');  

computeIntegral = 0;
normMuscleCurves.tendonStiffnessCurve = ...
          createTendonStiffnessCurve2021( normMuscleCurves.tendonForceLengthCurve,...
                                        curvinessTendon*curvinessTendon,...
                                        musculotendonProperties.name,...
                                        flag_useOctave);


fprintf('  tendonStiffnessCurve created\n');
