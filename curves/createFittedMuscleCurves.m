%%
% SPDX-FileCopyrightText: 2023 Matthew Millard <millard.matthew@gmail.com>
%
% SPDX-License-Identifier: MIT
%
% If you use this code in your work please cite the pre-print of this paper
% or the most recent peer-reviewed version of this paper:
%
%    Matthew Millard, David W. Franklin, Walter Herzog. 
%    A three filament mechanistic model of musculotendon force and impedance. 
%    bioRxiv 2023.03.27.534347; doi: https://doi.org/10.1101/2023.03.27.534347 
%
%%

function [normMuscleCurves,...
          musculotendonPropertiesUpd,...
          sarcomerePropertiesUpd,...
          activeForceLengthCurveAnnotationPoints,...
          dataActiveForceLengthUpd,...
          dataPassiveForceLengthUpd,...
          forceLengthCurveSettings] = createFittedMuscleCurves(...
                      musculotendonProperties,...
                      sarcomereProperties,...   
                      useWLCTitinModel,...                      
                      useCalibratedCurves,...      
                      useTwoSidedTitinCurves,...
                      dataActiveForceLength,...
                      dataPassiveForceLength,...
                      shiftLengthActiveForceLengthCurveDescendingCurve,...                  
                      flag_enableNumericallyNonZeroGradients,...
                      smallNumericallyNonZeroNumber,...
                      flag_solveForOptimalFiberLengthOfBestFit,...
                      createMusculoTendonFcn,...
                      useElasticTendon,...
                      elasticTendonReferenceModel,...
                      flag_useOctave)
%%
% Will create all of the Bezier curves that are needed to simulate both
% Vexat and 2012 equilibrium muscle model
% 
% @param musculotendonProperties:
%   A struct that contains architectural properties of the muscle along with 
%   some additional mechanical properties. See the current example
%   in parameters/felineSoleus/getFelineSoleusMusculotendonProperties.m
%
% @param sarcomereProperties           
%   A struct that returns the normalized lengths of the various filaments
%   in the sarcomeres of the type of muscle being simulated in addition to
%   some additional properites related to cross bridge stiffness and damping
%   required in Vexat. See the current example in
%   in parameters/felineSoleus/getMammalianSkeletalMuscleNormalizedSarcomereProperties.m
%
% @param dataActiveForceLength
%   An n by two matrix where the first column is normalized fiber length 
%   and the second column is normalized active muscle force. For an example
%   please see
%   parameters/felineSoleus/getFelineSoleusMusculotendonData.m
%
% @param dataPassiveForceLength
%   An n by two matrix where the first column is normalized fiber length 
%   and the second column is normalized passive muscle force. For an example
%   please see
%   parameters/felineSoleus/getFelineSoleusMusculotendonData.m
%
% @param flag_enableNumericallyNonZeroGradients
%   Setting this to 1 will ensure that large curve sections that would otherwise 
%   have a slope of zero (e.g. the part of the active force length curve that is 
%   between 0 and close to 0.5, and is greater than 1.6) will have non-zero a
%   non zero slope with a magnitude equal to smallNumericallyNonZeroNumber.
%   This is particularly useful when using this muscle model in an optimization 
%   routine that does not tolerate gradients of zero.
%
% @param smallNumericallyNonZeroNumber
%   If flag_enableNumericallyNonZeroGradients is set to 1 then all of the
%   sections of the curves that would other wise have a slope of zero will
%   have a slope that is set to the value here. I recommend a value that
%   is for practical terms zero, but is greater than the tolerance used on 
%   the optimization problem.
%
%
% @param flag_solveForOptimalFiberLengthOfBestFit
%         When set to 1 an optimization run will be made in which the
%         optimal fiber length is scaled so that the distance between
%         the active force length curve and the normalized active 
%         force length data is minimized.
%
% @param createMusculoTendonFcn
%         A function that takes the arguments scaleFiberLength and
%         scaleMaximumIsometricTension and returns 4 structures:
%         musculotendonProperties, sarcomereProperties,
%         activeForceLengthData, and passiveForceLengthData.
%      
% @param flag_useOctave
%   Setting this to 1 will ensure that no parts of the code that are 
%   incompatible with octave are called.
%
% @return structs 
%   normMuscleCurves with these fields
%     activeForceLengthCurve,
%     fiberForceVelocityCurve
%     fiberForceLengthCurve
%     forceLengthECMHalfCurve
%     forceLengthIgPCurve
%     forceLengthPevkIgDCurve
%     tendonForceLengthCurve
%     tendonDampingLengthCurve
%
% sarcomerePropertiesUpd
%   identical to the sarcomere properties struct except in the case
%   when dataPassiveForceLength is not empty: in this case the field
%   extraCellularMatrixPassiveForceFraction has been updated so that
%   the combined passive forces developed by the ECM and titin
%   fit the passive force length curve data as closely as possible.
%%
    
% Note
%  These curves are really in here just for plotting purposes: the model
%  does not use them.
%
%  forceLengthIgpCurveHuman
%  forceLengthPevkIgdCurveHuman
%  forceLengthIgpCurveHumanB
%  forceLengthPevkIgdCurveHumanB

normMuscleCurves = struct('activeForceLengthCurve' ,            [],...
                          'fiberForceVelocityCurve',            [],...
                          'activeForceLengthCalibratedCurve' ,  [],...
                          'fiberForceVelocityCalibratedCurve',  [],...
                          'useWLCTitinModel',useWLCTitinModel,...
                          'useCalibratedCurves',useCalibratedCurves,...                          
                          'fiberForceLengthCurve'  ,        [],...
                          'fiberForceLengthInverseCurve'  , [],...                          
                          'forceLengthECMHalfCurve',        [],...
                          'forceLengthECMHalfInverseCurve', [],...                          
                          'forceLengthProximalTitinCurve',  [],...
                          'forceLengthDistalTitinCurve',    [],...
                          'forceLengthProximalTitinInverseCurve',  [],...
                          'forceLengthDistalTitinInverseCurve',    [],...
                          'forceLengthIgPTitinCurve',            [],...
                          'forceLengthPevkTitinCurve',        [],...
                          'forceLengthIgDTitinCurve',        [],... 
                          'forceLengthIgPTitinInverseCurve',            [],...
                          'forceLengthPevkTitinInverseCurve',        [],...
                          'forceLengthIgDTitinInverseCurve',        [],... 
                          'useTitinCurvesWithRigidIgDSegment', 0,...
                          'useTwoSidedTitinCurves', useTwoSidedTitinCurves,...
                          'fiberForceVelocityInverseCurve', [],...
                          'fiberForceVelocityCalibratedInverseCurve',[],...
                          'tendonForceLengthCurve',         [],...
                          'tendonForceLengthInverseCurve',  [],...
                          'compressiveForceLengthCurve', []);

%                          'forceLengthProximalTitinTwoSidedCurve',  [],...
%                          'forceLengthDistalTitinTwoSidedCurve',    [],...
%                          'forceLengthProximalTitinInverseTwoSidedCurve',  [],...
%                          'forceLengthDistalTitinInverseTwoSidedCurve',    [],...
                        
%'forceLengthIgpCurveHuman',       [],...
%'forceLengthPevkIgdCurveHuman',   [],...
%'forceLengthIgpCurveHumanB',      [],...
%'forceLengthPevkIgdCurveHumanB',  [],...
%'forceLengthProximalTitinCurveHuman',  [],...
%'forceLengthDistalTitinCurveHuman',    [],...
%'forceLengthProximalTitinInverseCurveHuman',  [],...
%'forceLengthDistalTitinInverseCurveHuman',    [],...
%'forceLengthProximalTitinCurveTwoSidedHuman',  [],...
%'forceLengthDistalTitinCurveTwoSidedHuman',    [],...
%'forceLengthProximalTitinInverseCurveTwoSidedHuman',  [],...
%'forceLengthDistalTitinInverseCurveTwoSidedHuman',    [],...

curvinessActiveForceLength = 1.;                        
%%
%
% Scale the fiber length and maximum isometric force such that the
% active force length curve fits the data as closely as possible.
%%
                        
if(flag_solveForOptimalFiberLengthOfBestFit==1 ...
      && isempty(createMusculoTendonFcn)==0)
  x0 = [1.];
  errFcn = @(argX)calcScalingError(argX,createMusculoTendonFcn,...
                                        curvinessActiveForceLength,...
                                        flag_enableNumericallyNonZeroGradients,...
                                        smallNumericallyNonZeroNumber,...                                        
                                        flag_useOctave);
  A   = [];
  B   = [];
  Aeq = [];
  Beq = [];
  lb  = [0.5];
  ub  = [1.5];  
                                      
  [x,fval,exitflag]=fmincon( errFcn, x0, A,B,Aeq,Beq,lb,ub);

  assert(exitflag==1);
    
  scaleOptimalFiberLength       = x(1,1);
  scaleMaximumIsometricTension  = 1;
  
  [musculotendonProperties, ...
   sarcomereProperties,...
   dataActiveForceLength,...
   dataPassiveForceLength] = ...
      createMusculoTendonFcn(scaleOptimalFiberLength,...
                             scaleMaximumIsometricTension);
  
end

     
%musculotendonPropertiesUpd = musculotendonProperties;
%sarcomerePropertiesUpd     = sarcomereProperties;   
%dataActiveForceLengthUpd   = dataActiveForceLength;
%dataPassiveForceLengthUpd  = dataPassiveForceLength;

%%
% 
% Active-force-length curve:
%   :Build using sarcomere geometry. For now do not fit it
%%

fprintf('Building default curves ... \n')

flag_compensateForCrossbridgeStiffness = 0;
[normMuscleCurves.activeForceLengthCurve, ...
  activeForceLengthCurveAnnotationPoints] ...
    = createFiberActiveForceLengthCurve(...
          sarcomereProperties.normMyosinHalfLength*2,...
          sarcomereProperties.normMyosinBareHalfLength*2,...
          sarcomereProperties.normActinLength,...
          sarcomereProperties.normZLineLength,...
          sarcomereProperties.normSarcomereLengthZeroForce,...
          sarcomereProperties.normCrossBridgeStiffness,...          
          curvinessActiveForceLength, ...           
          shiftLengthActiveForceLengthCurveDescendingCurve,...
          flag_compensateForCrossbridgeStiffness,...          
          flag_enableNumericallyNonZeroGradients,...
          smallNumericallyNonZeroNumber,...
          musculotendonProperties.name,...
          flag_useOctave);  

fprintf('  activeForceLengthCurve created\n');

flag_compensateForCrossbridgeStiffness = 1;
[normMuscleCurves.activeForceLengthCalibratedCurve, ...
  activeForceLengthCurveAnnotationPointsCal] ...
    = createFiberActiveForceLengthCurve(...
          sarcomereProperties.normMyosinHalfLength*2,...
          sarcomereProperties.normMyosinBareHalfLength*2,...
          sarcomereProperties.normActinLength,...
          sarcomereProperties.normZLineLength,...
          sarcomereProperties.normSarcomereLengthZeroForce,...
          sarcomereProperties.normCrossBridgeStiffness,...          
          curvinessActiveForceLength, ...           
          shiftLengthActiveForceLengthCurveDescendingCurve,...
          flag_compensateForCrossbridgeStiffness,...          
          flag_enableNumericallyNonZeroGradients,...
          smallNumericallyNonZeroNumber,...
          musculotendonProperties.name,...
          flag_useOctave);  


fprintf('  activeForceLengthCalibratedCurve created\n');
%%
% 
% Force Velocity Curve
%
%%

curvinessEccentricForceVelocity = 0.9;
normMuscleCurves.fiberForceVelocityCurve ...
  = createFiberForceVelocityCurve(...
      musculotendonProperties.forceVelocityMultiplierAtHalfMaximumFiberVelocity,...
      musculotendonProperties.forceVelocityMultiplierAtLowEccentricFiberVelocity,...
      musculotendonProperties.forceVelocityMultiplierAtMaximumEccentricFiberVelocity,...
      curvinessEccentricForceVelocity,...
      flag_enableNumericallyNonZeroGradients,...
      smallNumericallyNonZeroNumber,...
      musculotendonProperties.name,...
      flag_useOctave);
fprintf('  fiberForceVelocityCurve created\n'); 

normMuscleCurves.fiberForceVelocityInverseCurve = ...
  createInverseCurve(normMuscleCurves.fiberForceVelocityCurve);
fprintf('  fiberForceVelocityInverseCurve created\n');


normMuscleCurves.fiberForceVelocityCalibratedCurve = ...
normMuscleCurves.fiberForceVelocityCurve;


normMuscleCurves.fiberForceVelocityCalibratedCurve.xpts = ...
  normMuscleCurves.fiberForceVelocityCalibratedCurve.xpts ...
  .*sarcomereProperties.forceVelocityCalibrationFactor;

normMuscleCurves.fiberForceVelocityCalibratedCurve.xEnd = ...
  normMuscleCurves.fiberForceVelocityCalibratedCurve.xEnd ...
  .*sarcomereProperties.forceVelocityCalibrationFactor;

normMuscleCurves.fiberForceVelocityCalibratedCurve.dydxEnd = ...
  normMuscleCurves.fiberForceVelocityCalibratedCurve.dydxEnd ...
  ./sarcomereProperties.forceVelocityCalibrationFactor;

fprintf('  fiberForceVelocityCalibratedCurve created\n'); 

normMuscleCurves.fiberForceVelocityCalibratedInverseCurve = ...
  createInverseCurve(normMuscleCurves.fiberForceVelocityCalibratedCurve);
fprintf('  fiberForceVelocityCalibratedInverseCurve created\n');

%%
%
% Passive force length curve:
%   fit it to data, if its available. Otherwise use plausible defaults
%%
forceLengthCurveSettings = struct('normLengthZero',0,'normLengthToe',0,'fToe',0,...
                                  'kZero',0,'kToe',0,'curviness',0);

if(isempty(dataPassiveForceLength) == 0)

  %Fit the passive curve so that it has the same force-path-length curve
  %as the elastic tendon MTU. 
  if(useElasticTendon == 0 && isempty(elasticTendonReferenceModel)==0 )
      normLengthZero           = 1.0; 
      normLengthToe            = 1.7;
      kZero           = 0;
      
      if(flag_enableNumericallyNonZeroGradients)
        kZero = smallNumericallyNonZeroNumber;
      end         
      
      kLow            = 0.2;
      kNum            = 2;
      kToe            = kNum/(normLengthToe-normLengthZero);
      curviness       = 0.75;
      xshift          = min(dataPassiveForceLength(:,1));
      xwidth          = 0.7;



      problemScaling  = 1000;
      params0         = [xshift  , xwidth, curviness].*problemScaling;
      paramsLB        = [0.8*xshift    ;    0.5; 0.05].*problemScaling;
      paramsUB        = [2.0           ;    2.0; 0.95].*problemScaling;
      
      fixedParams = [kLow,kNum,kZero];%,curviness];

      errFcn = @(argX)calcRigidToElasticTendonForceLengthCurveError(argX,...
                       dataPassiveForceLength,problemScaling,...
                       fixedParams, elasticTendonReferenceModel,flag_useOctave);  

      err0 = errFcn(params0);
      lsqOptions = optimoptions('lsqnonlin','Display','off',...
          'FinDiffType','central','FunctionTolerance',1e-8,'MaxIterations',5000);
      [x,resnorm,residual,exitflag,output,lambda,jacobian]    =...
          lsqnonlin(errFcn,params0,paramsLB,paramsUB,lsqOptions);
      err1 = errFcn(x);

      fprintf('  forceLengthCurve fitted to elastic tendon model, error reduced from %1.2e - %1.2e\n',...
          norm(err0),norm(err1));  

      xshift    = x(1)/problemScaling;
      xwidth    = x(2)/problemScaling;
      curviness = x(3)/problemScaling;

      normLengthZero = xshift;
      normLengthToe  = xshift + xwidth;
      kToe      = kNum/(normLengthToe-normLengthZero);
      fToe      = 1;
      %curviness = 0.75;
    
      assert( kZero < kLow );
      
      flag_computeIntegral = 1;
      normMuscleCurves.fiberForceLengthCurve = ...
        createFiberForceLengthCurve2021(normLengthZero,...
                                    normLengthToe,...
                                    fToe,...
                                    kZero,...
                                    kLow,...
                                    kToe,...
                                    curviness,...
                                    flag_computeIntegral,...
                                    musculotendonProperties.name,...
                                    flag_useOctave);
                                  
      forceLengthCurveSettings.normLengthZero = normLengthZero;
      forceLengthCurveSettings.normLengthToe  = normLengthToe;
      forceLengthCurveSettings.fToe           = fToe;
      forceLengthCurveSettings.kZero = kZero;
      forceLengthCurveSettings.kLow  = kLow;
      forceLengthCurveSettings.kToe  = kToe;
      forceLengthCurveSettings.curviness = curviness;


  end

  if(useElasticTendon == 1 || isempty(elasticTendonReferenceModel)==1 )

      normLengthZero           = 1.0; 
      normLengthToe            = 1.7;
      kZero           = 0;
      
      if(flag_enableNumericallyNonZeroGradients)
        kZero = smallNumericallyNonZeroNumber;
      end         
      
      kLow            = 0.2;
      kNum            = 2;
      kToe            = kNum/(normLengthToe-normLengthZero);
      curviness       = 0.75;
      xshift          = min(dataPassiveForceLength(:,1));
      xwidth          = 0.7;
      problemScaling  = 1000;
      params0         = [xshift  , xwidth].*problemScaling;
      paramsLB        = [0.8*xshift    ;    0.5].*problemScaling;
      paramsUB        = [2.0     ;   2.0].*problemScaling;
      
      fixedParams = [kLow,kNum,kZero,curviness];
    
      errFcn = @(argX)calcFittedFiberForceLengthCurveError(argX,...
                       dataPassiveForceLength,problemScaling,...
                       fixedParams,flag_useOctave);
      
                   
      err0 = errFcn(params0);
      lsqOptions = optimoptions('lsqnonlin','Display','off',...
          'FinDiffType','central');
      x    = lsqnonlin(errFcn,params0,paramsLB,paramsUB,lsqOptions);
      err1 = errFcn(x);
    
      fprintf('  forceLengthCurve fitted, error reduced from %1.2e - %1.2e\n',...
              norm(err0),norm(err1));
      
      xshift    = x(1)/problemScaling;
      xwidth    = x(2)/problemScaling;
      normLengthZero = xshift;
      normLengthToe  = xshift + xwidth;
      kToe      = kNum/(normLengthToe-normLengthZero);
      fToe      = 1;
      curviness = 0.75;
    
      assert( kZero < kLow );
      
      flag_computeIntegral = 1;
      normMuscleCurves.fiberForceLengthCurve = ...
        createFiberForceLengthCurve2021(normLengthZero,...
                                    normLengthToe,...
                                    fToe,...
                                    kZero,...
                                    kLow,...
                                    kToe,...
                                    curviness,...
                                    flag_computeIntegral,...
                                    musculotendonProperties.name,...
                                    flag_useOctave);
                                  
      forceLengthCurveSettings.normLengthZero = normLengthZero;
      forceLengthCurveSettings.normLengthToe  = normLengthToe;
      forceLengthCurveSettings.fToe           = fToe;
      forceLengthCurveSettings.kZero = kZero;
      forceLengthCurveSettings.kLow  = kLow;
      forceLengthCurveSettings.kToe  = kToe;
      forceLengthCurveSettings.curviness = curviness;

  end
    
else  

  normLengthZero = 1+0; 
  normLengthToe  = 1+0.6;
  fToe  = 1;
  kZero = 0;
  if(flag_enableNumericallyNonZeroGradients)
    kZero = smallNumericallyNonZeroNumber;
  end         
  kLow  = 0.2;
  kToe  = 2/(normLengthToe-normLengthZero);
  curviness = 0.75;  
  flag_computeIntegral = 1;
  normMuscleCurves.fiberForceLengthCurve = ...
    createFiberForceLengthCurve2021(normLengthZero,...
                                normLengthToe,...
                                fToe,...
                                kZero,...
                                kLow,...
                                kToe,...
                                curviness,...
                                flag_computeIntegral,...
                                musculotendonProperties.name,...
                                flag_useOctave);                 
                              
  forceLengthCurveSettings.normLengthZero = normLengthZero;
  forceLengthCurveSettings.normLengthToe  = normLengthToe;
  forceLengthCurveSettings.fToe  = fToe;
  forceLengthCurveSettings.kZero = kZero;
  forceLengthCurveSettings.kLow  = kLow;
  forceLengthCurveSettings.kToe  = kToe;
  forceLengthCurveSettings.curviness = curviness;
                             
                              
end     



fprintf('  fiberForceLengthInverseCurve created\n');
normMuscleCurves.fiberForceLengthInverseCurve = ...
      createInverseCurve(normMuscleCurves.fiberForceLengthCurve);



%%
%
%   Titin curves and extracellular matrix curves
%     :If passive force-length data exists, solve for the minimum permissable 
%      value for the ECM fraction that results in a set of passive curves for 
%      the ECM and titin that:
%
%     1. Can reproduce the passive force length curve data
%     2. With curves for the IgP and PEVK regions that are plausible 
%
%%


fprintf('  ecm & titin curves:\n');


flag_computeCurveIntegrals=0;
flag_computeIntegral=0;
  
lambdaECM = sarcomereProperties.extraCellularMatrixPassiveForceFraction;    
normMuscleCurves.forceLengthECMHalfCurve  = ...
  createFiberForceLengthCurve2021((forceLengthCurveSettings.normLengthZero)*0.5,...
                              (forceLengthCurveSettings.normLengthToe)*0.5,...
                              lambdaECM,...
                              forceLengthCurveSettings.kZero*(lambdaECM*2),...
                              forceLengthCurveSettings.kLow*(lambdaECM*2),...
                              forceLengthCurveSettings.kToe*(lambdaECM*2),...
                              forceLengthCurveSettings.curviness,...
                              flag_computeCurveIntegrals,...                              
                              musculotendonProperties.name,...
                              flag_useOctave);  

normMuscleCurves.forceLengthECMHalfCurve.name = sprintf('%s.%s',...
  musculotendonProperties.name,'forceLengthECMHalfCurve');
fprintf('    forceLengthECMHalfCurve created\n');

normMuscleCurves.forceLengthECMHalfInverseCurve = ...
      createInverseCurve(normMuscleCurves.forceLengthECMHalfCurve); 
fprintf('    forceLengthECMHalfInverseCurve created\n');



%%
%Stiff spring titin curves
%  :Here the PEVK segment is its own separate elastic curve and the distal Ig
%   segment is lumped with the proximal Ig segment.
%%
flag_useElasticIgD        = 1;
flag_createTwoSidedCurves = 0;

[normMuscleCurves.forceLengthProximalTitinCurve, ...
    normMuscleCurves.forceLengthProximalTitinInverseCurve,...
 normMuscleCurves.forceLengthDistalTitinCurve, ...
    normMuscleCurves.forceLengthDistalTitinInverseCurve,...
 normMuscleCurves.forceLengthIgPTitinCurve, ...
    normMuscleCurves.forceLengthIgPTitinInverseCurve,...
 normMuscleCurves.forceLengthPevkTitinCurve, ...
    normMuscleCurves.forceLengthPevkTitinInverseCurve,...
 normMuscleCurves.forceLengthIgDTitinCurve, ...
    normMuscleCurves.forceLengthIgDTitinInverseCurve] ...
          = createTitinCurves2022( normMuscleCurves.fiberForceLengthCurve,...                                   
                                   forceLengthCurveSettings,...
                                   normMuscleCurves.forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   musculotendonProperties.name,...
                                   useWLCTitinModel,...
                                   flag_createTwoSidedCurves,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   sarcomereProperties.titinModelType,...                                   
                                   flag_useOctave);


 
  
%%
%
% Tendon Force-Length Curve
%
%%
eIso            = musculotendonProperties.tendonStrainAtOneNormForce;
kIso            = 1.375/eIso;
fToe            = 2./3.;
curvinessTendon = 0.5;
computeIntegral = 1;
minimumSlope    = 0;
if(flag_enableNumericallyNonZeroGradients==1)
  minimumSlope = smallNumericallyNonZeroNumber;
end
if(eIso > 0)
    normMuscleCurves.tendonForceLengthCurve = ...
      createTendonForceLengthCurve2021( eIso, kIso, ...
                                        fToe, curvinessTendon, ...
                                        computeIntegral, ...
                                        flag_enableNumericallyNonZeroGradients,...
                                        smallNumericallyNonZeroNumber,...
                                        musculotendonProperties.name,...
                                        flag_useOctave);
    fprintf('  tendonForceLengthCurve created\n');
      
    normMuscleCurves.tendonForceLengthInverseCurve = ...
      createInverseCurve(normMuscleCurves.tendonForceLengthCurve);
    
    fprintf('  tendonForceLengthInverseCurve created\n');      
    computeIntegral = 0;
    normMuscleCurves.tendonStiffnessCurve = ...
              createTendonStiffnessCurve2021( normMuscleCurves.tendonForceLengthCurve,...
                                            curvinessTendon*curvinessTendon,...
                                            flag_enableNumericallyNonZeroGradients,...                                      
                                            flag_useOctave);
    
    
    fprintf('  tendonStiffnessCurve created\n');    
else
    normMuscleCurves.tendonForceLengthCurve=[];
    normMuscleCurves.tendonForceLengthInverseCurve = [];
    normMuscleCurves.tendonStiffnessCurve=[];
end
    




%%
%
% Compressive Force-Length Curve
%   : to prevent the CE from going below its minimum fiber length
%
%%

lceOpt      = musculotendonProperties.optimalFiberLength; 
lceATMin    = musculotendonProperties.minimumFiberLengthAlongTendon;
fiberLengthAlongTendonAtOneNormForce = lceATMin/lceOpt;

alphaOpt    = musculotendonProperties.pennationAngle;
lceOptATN   = (lceOpt*cos(alphaOpt)/lceOpt);

fiberLengthAlongTendonAtZeroNormForce = ...
    fiberLengthAlongTendonAtOneNormForce ...
    +(lceOptATN/10.0);

curviness = 0.5;

normMuscleCurves.compressiveForceLengthCurve = ...
    createCompressiveForceLengthCurve2022(...
                    fiberLengthAlongTendonAtOneNormForce,...
                    fiberLengthAlongTendonAtZeroNormForce,...
                    curviness, ...
                    musculotendonProperties.name,...
                    flag_useOctave);

  
fprintf('  compressiveForceLengthCurve created\n');


musculotendonPropertiesUpd = musculotendonProperties;
sarcomerePropertiesUpd     = sarcomereProperties;   
dataActiveForceLengthUpd   = dataActiveForceLength;
dataPassiveForceLengthUpd  = dataPassiveForceLength;

