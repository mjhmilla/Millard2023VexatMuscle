function [forceLengthProximalTitinCurve, forceLengthProximalTitinInverseCurve,...
            forceLengthDistalTitinCurve, forceLengthDistalTitinInverseCurve,...
            forceLengthIgPTitinCurve, forceLengthIgPInverseTitinCurve,...
            forceLengthPevkTitinCurve, forceLengthPevkInverseTitinCurve,...
            forceLengthIgDTitinCurve, forceLengthIgDInverseTitinCurve] ...
          = createTitinCurves2022( fiberForceLengthCurve,...                                   
                                   forceLengthCurveSettings,...
                                   forceLengthECMHalfCurve,...
                                   sarcomereProperties,...
                                   muscleName,...
                                   flag_useWLCTitinModel,...
                                   flag_createTwoSidedCurves,...
                                   flag_computeCurveIntegrals,...
                                   flag_useElasticIgD,...
                                   flag_activeTitinModel,...
                                   flag_useOctave)
                                 

%%
%Evaluate the length and stiffness of fpe when it reaches a normalized
%force of 1.
%%


lambdaECM = sarcomereProperties.extraCellularMatrixPassiveForceFraction;
normPevkToActinAttachmentPoint = sarcomereProperties.normPevkToActinAttachmentPoint;

%%
% Get the titin normalized segment lengths
%%
ZLineToT12NormLengthAtOptimalFiberLength = ...
  sarcomereProperties.ZLineToT12NormLengthAtOptimalFiberLength;

IGDTotalNormLengthAtOptimalFiberLength = ...
  sarcomereProperties.IGDTotalNormLengthAtOptimalFiberLength;

IGDFixedNormLengthAtOptimalFiberLength=...
    sarcomereProperties.IGDFixedNormLengthAtOptimalFiberLength;  


lceZero = fiberForceLengthCurve.xEnd(1,1);

k = size(fiberForceLengthCurve.ypts,2);
x0 = 0;
if(   fiberForceLengthCurve.ypts(end,k) < 1 )
  x0 =   fiberForceLengthCurve.xEnd(1,2)...
       + diff(fiberForceLengthCurve.xEnd)*0.1;
else
  x0 = mean(fiberForceLengthCurve.xpts(:,k));
end



lceOne = ...
  calcBezierFcnXGivenY(1, fiberForceLengthCurve, x0);

lceZeroHalf  = 0.5*lceZero;
lceOneHalf   = 0.5*lceOne;

kpeOne = calcBezierYFcnXDerivative(lceOne,...
                      fiberForceLengthCurve,...
                      1);

kpeOneHalf = 2*kpeOne;
kecmOneHalf= calcBezierYFcnXDerivative(lceOneHalf,...
                      forceLengthECMHalfCurve,...
                      1);

kTitinOneHalf = kpeOneHalf - kecmOneHalf;

igpStretchRate  = sarcomereProperties.IGPNormStretchRate;
pevkStretchRate = sarcomereProperties.PEVKNormStretchRate;
igdStretchRate  = sarcomereProperties.IGDFreeNormStretchRate;

igpContourLength    = sarcomereProperties.IGPContourLengthNorm;
pevkContourLength   = sarcomereProperties.PEVKContourLengthNorm;
igdContourLength    = sarcomereProperties.IGDFreeContourLengthNorm;

pevkIgdStretchRate = 0;
distalStretchRate=0;   % From the pevk-actin attachment point to myosin
proximalStretchRate=0; % From the z-line to the pevk-actin attachment point



proximalContourLength=0;
distalContourLength = 0;

switch flag_activeTitinModel

    case 0
        %Sticky spring: lump IgD and part of PEVK distal to attachment point 
        %Lump IgD with PEVK
        u = flag_useElasticIgD;
        assert(u==0 || u==1,'flag_useElasticIgD must be 0 or 1');

%        if(flag_useElasticIgD==1)
            pevkIgdStretchRate = sarcomereProperties.PEVKNormStretchRate ...
                                +u*sarcomereProperties.IGDFreeNormStretchRate;
        
            distalStretchRate = ...
                (1-normPevkToActinAttachmentPoint)*sarcomereProperties.PEVKNormStretchRate ...
                                + u*sarcomereProperties.IGDFreeNormStretchRate;  
            
            proximalStretchRate = sarcomereProperties.IGPNormStretchRate ...
              + normPevkToActinAttachmentPoint*sarcomereProperties.PEVKNormStretchRate;               
        
            proximalContourLength = sarcomereProperties.IGPContourLengthNorm ...
              + normPevkToActinAttachmentPoint*sarcomereProperties.PEVKContourLengthNorm;
            distalContourLength   = ...
                (1-normPevkToActinAttachmentPoint)*sarcomereProperties.PEVKContourLengthNorm ...
                +u*sarcomereProperties.IGDFreeContourLengthNorm;

    case 1 
        %Stiff spring: lump IgP and IgD together
        %Lump IgD with IgP 
        u = flag_useElasticIgD;
        assert(u==0 || u==1,'flag_useElasticIgD must be 0 or 1');

        proximalStretchRate = sarcomereProperties.IGPNormStretchRate;               
    
        pevkIgdStretchRate = sarcomereProperties.PEVKNormStretchRate ...
                            + u*sarcomereProperties.IGDFreeNormStretchRate;  
        
        %For this model the distal stretch rate is identical to the
        %pevkIgdStretchRate
        distalStretchRate = pevkIgdStretchRate;

        proximalContourLength = sarcomereProperties.IGPContourLengthNorm;
        distalContourLength   = sarcomereProperties.PEVKContourLengthNorm ...
                              + u*sarcomereProperties.IGDFreeContourLengthNorm;  
    otherwise
        assert(0,'flag_activeTitinModel must be 0 or 1');  

end




%%
% ka = kigp
% kb = kpevk
% kc = kigd
% kd = ktitin
% 1/ka + 1/kb + 1/kc = 1/kd [1]
%
% We also have the stretch rates extracted from Trombitas 1998 (see
% parameters/felineSoleus/getMammalianSkeletalMuscleNormalizedSarcomereProperties.m
% where the variable 'normStretchRateIgP is defined (near line 218-220)
%
% sa = rate the igp region stretches as the sarcomere stretches
% sb = rate the pevk region stretches as the sarcomere stretches
% sc = rate the igd region stretches as the sarcomere stretches
%
% Or more concisely
%
%  sa = delta la /delta ls     [2]
%  sb = delta lb /delta ls     [3]
%  sb = delta lc /delta ls     [4]
%
%
% where ls is the sarcomere length. Since these elements are in series
%
% ka = delta f / delta la  =  delta f / (delta sa * delta ls)   [5]
% kb = delta f / delta lb  =  delta f / (delta sb * delta ls)   [6]
% kc = delta f / delta lc  =  delta f / (delta sc * delta ls)   [7]
%
% If we multiply Eqn. 1 by ka we end up with
%
% ka/ka + ka/kb + ka/kc = ka/kd [8]
%
% Subsituting in Eqns. 5, 6, 7 on the left hand side
%
% 1 + lb/la + lc/la = ka/kd [9]
%
% Allowing us to solve for ka, since it is the only unknown in Eqn. 9
%
%%
sigp = igpStretchRate;
spevk= pevkStretchRate;
sigd = igdStretchRate;

kigp  = (     1       + (spevk/sigp) + (sigd/sigp))*kTitinOneHalf;
kpevk = ((sigp/spevk) +       1      + (sigd/spevk))*kTitinOneHalf;
kigd  = ((sigp/sigd)  + (spevk/sigd) +      1      )*kTitinOneHalf;

kerr = (1/kigp) + (1/kpevk) + (1/kigd) - (1/kTitinOneHalf);
assert(abs(kerr) < 1e-3);

A   = distalStretchRate/proximalStretchRate;
kD  = kTitinOneHalf*(A+1)/A;
kP  = A*kD;



%Geometrically scale the stiffnesses of the two segment titin
%force-length curves
kDLow     = kD*(forceLengthCurveSettings.kLow ...
               /forceLengthCurveSettings.kToe);

kPLow     = kP*(forceLengthCurveSettings.kLow ...
               /forceLengthCurveSettings.kToe);

kDZero    = kD*(forceLengthCurveSettings.kZero ...
               /forceLengthCurveSettings.kToe);

kPZero    = kP*(forceLengthCurveSettings.kZero ...
               /forceLengthCurveSettings.kToe); 

%Geometrically scale the stiffnesses of the three segment titin
%force-length curves
kpevkLow    = kpevk*(forceLengthCurveSettings.kLow ...
                 /forceLengthCurveSettings.kToe);

kigpLow     = kigp*(forceLengthCurveSettings.kLow ...
                   /forceLengthCurveSettings.kToe);

kigdLow     = kigd*(forceLengthCurveSettings.kLow ...
                   /forceLengthCurveSettings.kToe);

kpevkZero   = kpevk*(forceLengthCurveSettings.kZero ...
                  /forceLengthCurveSettings.kToe);

kigpZero    = kigp*(forceLengthCurveSettings.kZero ...
                    /forceLengthCurveSettings.kToe);                    

kigdZero    = kigd*(forceLengthCurveSettings.kZero ...
                    /forceLengthCurveSettings.kToe);                    



%Evalute the normalized length of each element at lceOneHalf
%sarcomereProperties
ltitinOneHalf = 0;

if(flag_useElasticIgD==1)

    ltitinOneHalf = lceOneHalf...
      -(IGDFixedNormLengthAtOptimalFiberLength ...
      + ZLineToT12NormLengthAtOptimalFiberLength);  

else  
  ltitinOneHalf = lceOneHalf...
    -(IGDTotalNormLengthAtOptimalFiberLength ...
    + ZLineToT12NormLengthAtOptimalFiberLength);    
end


lPOneHalf  = ltitinOneHalf /(1 + (kP/kD)); 
lDOneHalf  = ltitinOneHalf /(1 + (kD/kP));

%As before
ligpOneHalf  = ltitinOneHalf /(1 + (kigp/kpevk) + (kigp/kigd)); 
lpevkOneHalf = ltitinOneHalf /((kpevk/kigp) + 1 + (kpevk/kigd));
ligdOneHalf  = ltitinOneHalf /((kigd/kigp)  + (kigd/kpevk) + 1); 

lerr = (ligpOneHalf+lpevkOneHalf+ligdOneHalf)-ltitinOneHalf;
assert(abs(lerr)<1e-3);


%Evaluate the proportion of the force-length curve that is of low 
%strain
strainWidth = forceLengthCurveSettings.normLengthToe-forceLengthCurveSettings.normLengthZero;  
lowStrainWidth =  (strainWidth - (1/forceLengthCurveSettings.kToe))...
                  /(1/forceLengthCurveSettings.kToe);
eZeroTest = forceLengthCurveSettings.normLengthToe ...
           -(1/forceLengthCurveSettings.kToe)...
           -(1/forceLengthCurveSettings.kToe)*lowStrainWidth;    

%Set the low strain values for each of the igp and pevk-igd to preserve
%this same proportion

% ltitinZeroHalf = 0;
% 
% if(flag_useElasticIgD==1)
% 
%     ltitinZeroHalf = lceZeroHalf...
%       -(IGDFixedNormLengthAtOptimalFiberLength ...
%        + ZLineToT12NormLengthAtOptimalFiberLength);  
% 
% else
% 
%     ltitinZeroHalf = lceZeroHalf...
%       -(IGDTotalNormLengthAtOptimalFiberLength ...
%        + ZLineToT12NormLengthAtOptimalFiberLength);    
% 
% end

ligpZeroHalf     = ligpOneHalf      - ((1-lambdaECM)/kigp) ...
                 - ((1-lambdaECM)/kigp)*lowStrainWidth; 
lpevkZeroHalf    = lpevkOneHalf  - ((1-lambdaECM)/kpevk) ...
                  - ((1-lambdaECM)/kpevk)*lowStrainWidth;  
ligdZeroHalf     = ligdOneHalf      - ((1-lambdaECM)/kigd) ...
                 - ((1-lambdaECM)/kigd)*lowStrainWidth; 


lPZeroHalf      = lPOneHalf      - ((1-lambdaECM)/kP) ...
                 - ((1-lambdaECM)/kP)*lowStrainWidth; 
lDZeroHalf      = lDOneHalf  - ((1-lambdaECM)/kD) ...
                 - ((1-lambdaECM)/kD)*lowStrainWidth;  
%%
% Evaluate the zero, one, kzero, klow, and k values for two segments:
%   1. From the Z-line, through the IgP segment, to the desired PEVK segment fraction
%   2. From the desired PEVK segment fraction to the distal Ig/myosin boundary.
%%


fNfailure = sarcomereProperties.normTitinFailureForce*2; 

%%
% Make the Igp curve
%%
if flag_createTwoSidedCurves == 0
  forceLengthIgPTitinCurve  = ...
    createWLCForceLengthCurve2022(ligpZeroHalf,...
                                ligpOneHalf,...
                                (1-lambdaECM),...
                                igpContourLength,...
                                fNfailure,...
                                kigpZero,...
                                kigpLow,...
                                kigp,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...                                
                                muscleName,...
                                flag_useOctave); 
else
  forceLengthIgPTitinCurve  = ...
    createTwoSidedWLCForceLengthCurve2022(ligpZeroHalf,...
                                ligpOneHalf,...
                                (1-lambdaECM),...
                                igpContourLength,...
                                fNfailure,...
                                kigpZero,...
                                kigpLow,...
                                kigp,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave); 
end

forceLengthIgPTitinCurve.name = sprintf('%s.%s',...
  muscleName,'forceLengthIgPTitinCurve');
%fprintf('    forceLengthProximalTitinCurve created\n');

forceLengthIgPInverseTitinCurve = ...
      createInverseCurve(forceLengthIgPTitinCurve); 
%fprintf('    forceLengthProximalTitinInverseCurve created\n');

%%
% Make the PEVK curve
%%

if flag_createTwoSidedCurves == 0
  forceLengthPevkTitinCurve  = ...
    createWLCForceLengthCurve2022(lpevkZeroHalf,...
                                lpevkOneHalf,...
                                (1-lambdaECM),...
                                pevkContourLength,...
                                fNfailure,...
                                kpevkZero,...
                                kpevkLow,...
                                kpevk,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave); 
else
  forceLengthPevkTitinCurve  = ...
    createTwoSidedWLCForceLengthCurve2022(lpevkZeroHalf,...
                                lpevkOneHalf,...
                                (1-lambdaECM),...
                                pevkContourLength,...
                                fNfailure,...
                                kpevkZero,...
                                kpevkLow,...
                                kpevk,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave);
end

forceLengthPevkTitinCurve.name = sprintf('%s.%s',...
  muscleName,'forceLengthPevkTitinCurve');

forceLengthPevkInverseTitinCurve = ...
      createInverseCurve(forceLengthPevkTitinCurve); 

%%
% Make the Igd curve
%%

if flag_createTwoSidedCurves == 0
  forceLengthIgDTitinCurve  = ...
    createWLCForceLengthCurve2022(ligdZeroHalf,...
                                ligdOneHalf,...
                                (1-lambdaECM),...
                                igdContourLength,...
                                fNfailure,...
                                kigdZero,...
                                kigdLow,...
                                kigd,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave); 
else
  forceLengthIgDTitinCurve  = ...
    createTwoSidedWLCForceLengthCurve2022(ligdZeroHalf,...
                                ligdOneHalf,...
                                (1-lambdaECM),...
                                igdContourLength,...
                                fNfailure,...
                                kigdZero,...
                                kigdLow,...
                                kigd,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave); 
end

forceLengthIgDTitinCurve.name = sprintf('%s.%s',...
  muscleName,'forceLengthIgDTitinCurve');

forceLengthIgDInverseTitinCurve = ...
      createInverseCurve(forceLengthIgDTitinCurve); 



%%
% Make the P curve
%%
if flag_createTwoSidedCurves == 0
  forceLengthProximalTitinCurve  = ...
    createWLCForceLengthCurve2022(lPZeroHalf,...
                                lPOneHalf,...
                                (1-lambdaECM),...
                                proximalContourLength,...
                                fNfailure,...
                                kPZero,...
                                kPLow,...
                                kP,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave); 
else
  forceLengthProximalTitinCurve  = ...
    createTwoSidedWLCForceLengthCurve2022(lPZeroHalf,...
                                lPOneHalf,...
                                (1-lambdaECM),...
                                proximalContourLength,...
                                fNfailure,...
                                kPZero,...
                                kPLow,...
                                kP,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave); 
end


forceLengthProximalTitinCurve.name = sprintf('%s.%s',...
  muscleName,'forceLengthProximalTitinCurve');
%fprintf('    forceLengthProximalTitinCurve created\n');

forceLengthProximalTitinInverseCurve = ...
      createInverseCurve(forceLengthProximalTitinCurve); 
%fprintf('    forceLengthProximalTitinInverseCurve created\n');


%%
% Make the D curve
%%
if flag_createTwoSidedCurves == 0
  forceLengthDistalTitinCurve  = ...
    createWLCForceLengthCurve2022(lDZeroHalf,...
                                lDOneHalf,...
                                (1-lambdaECM),...
                                distalContourLength,...
                                fNfailure,...
                                kDZero,...
                                kDLow,...
                                kD,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave);  
else 
  forceLengthDistalTitinCurve  = ...
    createTwoSidedWLCForceLengthCurve2022(lDZeroHalf,...
                                lDOneHalf,...
                                (1-lambdaECM),...
                                distalContourLength,...
                                fNfailure,...
                                kDZero,...
                                kDLow,...
                                kD,...
                                forceLengthCurveSettings.curviness,...
                                flag_computeCurveIntegrals,...
                                flag_useWLCTitinModel,...
                                muscleName,...
                                flag_useOctave);    
end




forceLengthDistalTitinCurve.name = sprintf('%s.%s',...
  muscleName,'forceLengthDistalTitinCurve');
%fprintf('    forceLengthDistalTitinCurve created\n');

forceLengthDistalTitinInverseCurve = ...
      createInverseCurve(forceLengthDistalTitinCurve); 


%fprintf('    forceLengthDistalTitinInverseCurve created\n');


flag_debugWLCExtension=0;
if(flag_debugWLCExtension == 1)

    figWLCDebug = figure;
    subplot(3,1,1);
    [figWLCDebug,ligpV,figpV,figpWLCV] ...
        = addWLCPlot(figWLCDebug, forceLengthIgPTitinCurve,...
            ligpOneHalf,igpContourLength,fNfailure,[0,0,1],'IgP');    
    [figWLCDebug,lpevkV,fpevkV,fpevkWLCV]...
        = addWLCPlot(figWLCDebug, forceLengthPevkTitinCurve,...
            lpevkOneHalf,pevkContourLength,fNfailure,[1,0,1],'PEVK');    
    [figWLCDebug,ligdV,figdV,figdWLCV]...
        = addWLCPlot(figWLCDebug, forceLengthIgDTitinCurve,...
        ligdOneHalf,igdContourLength,fNfailure,[1,0,0],'IgD');    
    title('Three segment molecular titin model');
    
    subplot(3,1,2);
    [figWLCDebug,lPV,fPV,fPWLCV]...
        = addWLCPlot(figWLCDebug, forceLengthProximalTitinCurve,...
            lPOneHalf,proximalContourLength,fNfailure,[0,0,1],'P');    
    [figWLCDebug,lDV,fDV,fPWLCV]...    
        = addWLCPlot(figWLCDebug, forceLengthDistalTitinCurve,...
            lDOneHalf,distalContourLength,fNfailure,[1,0,1],'D');    
    title('Two segment lumped titin model');
    
    subplot(3,1,3);

    fsample = ([0:0.01:1.0]').*fNfailure;
    ligp    = interp1(figpV, ligpV, fsample);
    lpevk   = interp1(fpevkV,lpevkV,fsample);
    ligd    = interp1(figdV, ligdV, fsample);
    
    lp = interp1(fPV,lPV,fsample);
    ld = interp1(fDV,lDV,fsample);

    plot((ligp+lpevk+ligd),fsample,'--','Color',[1,1,1].*0.5,...
        'LineWidth',2,'DisplayName','Titin3');
    hold on;

    plot((lp+ld),fsample,'-','Color',[0,0,0],'DisplayName','Titin2');
    hold on;

    box off;
    legend;

    xlabel('Norm. Length ($$\ell/\ell_{o}^{M}$$)');
    ylabel('Norm. Force ($$f/f_{o}^{M}$$)');

    text(0.05,5,'Titin3 and Titin2 WLC models have the same singularity');
    text(0.05,4,'but reach fN failure at different lengths because the');
    text(0.05,3,'WLC is nonlinear.');
    
    here=1;




end    
                                
                                 