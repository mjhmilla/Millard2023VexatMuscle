%Simulation of:
%  Kirsch RF, Boskov D, Rymer WZ. Muscle stiffness during transient and continuous 
%  movements of cat muscle: perturbation characteristics and physiological 
%  relevance. IEEE Transactions on Biomedical Engineering. 1994 Aug;41(8):758-70.


flag_outerLoopMode = 1;

if(flag_outerLoopMode == 0)
  clc;
  close all;
  clear all;

  flag_simulateHillModel                        = 0; 
  flag_simulateOpus31Model                      = 1;
  
  flag_fitToFig3KirchBoskovRymer1994            = 0; 
  flag_useElasticTendon                         = 1;
  flag_useFiberDamping                          = 1;
  
  flag_frequencyAnalysisMuscleModels            = 0;
  flag_plotAccelerationEquationFactors          = 0;  
  flag_pubPlotFrequencyResponseKBR1994Fig3      = 0;
  flag_pubPlotStiffnessDampingKBR1994Fig9Fig10  = 0;
  flag_pubPlotStiffnessDampingKBR1994Fig12      = 0;
  flag_pubTabulateStiffnessDampingVariation     = 0;
  flag_useCalibratedOpus31Curves                = 1;
  flag_useTwoSidedTitinCurves                   = 1;
end 


parametersDirectoryTree       = genpath('parameters');
curvesDirectoryTree           = genpath('curves');
experimentsDirectoryTree      = genpath('experiments');
simulationDirectoryTree       = genpath('simulation');
modelDirectoryTree            = genpath('models');
postprocessingDirectoryTree   = genpath('postprocessing');

addpath(parametersDirectoryTree       );
addpath(curvesDirectoryTree           );
addpath(experimentsDirectoryTree      );
addpath(simulationDirectoryTree       );
addpath(modelDirectoryTree            );
addpath(postprocessingDirectoryTree   );

assert(flag_pubPlotFrequencyResponseKBR1994Fig3 ...
      *flag_pubPlotStiffnessDampingKBR1994Fig12 ==0);
if(flag_pubPlotFrequencyResponseKBR1994Fig3 == 1)
  flag_fitToFig3KirchBoskovRymer1994 = 1;
end

plotLayoutSettings = struct('numberOfHorizontalPlotColumns',2,...
                            'numberOfVerticalPlotRows',3,...
                            'flag_fixedPlotWidth', 1,...
                            'plotWidth',6.5,...
                            'plotHeight',[],...
                            'plotWidth43',5.0,...
                            'plotHeight43', 3.0 ,...
                            'flag_usingOctave', 0);

numberOfHorizontalPlotColumns = plotLayoutSettings.numberOfHorizontalPlotColumns;
numberOfVerticalPlotRows      = plotLayoutSettings.numberOfVerticalPlotRows;
flag_fixedPlotWidth           = plotLayoutSettings.flag_fixedPlotWidth;
plotWidth                     = plotLayoutSettings.plotWidth;
plotHeight                    = plotLayoutSettings.plotWidth;
flag_usingOctave              = plotLayoutSettings.flag_usingOctave;
plotConfig;



%%
% I. Generate purturbation wave forms
%%

flag_generateRandomInput    = 0;
flag_processInputFunctions  = 0;
flag_plotInput              = 0;

% Perturbation waveform settings
%   These settings have been chosen to match those described in
%   Kirch, Boskov, and Rymer 1994. Only the padding size has been
%   freely chosen as I don't think the size of the signal padding
%   region was described in the paper.

sampleFrequency = 333; % Sampling frequency
paddingPoints   = round(0.2*sampleFrequency);
samplePoints    = 2048;% Number of points in the random sequence
totalPoints     = samplePoints;
amplitudeMM     = [0.4, 0.8, 1.6]'; %Amplitude scaling in mm
bandwidthHz     = [ 15,  35,  90]'; %bandwidth in Hz;

signalFileEnding = sprintf('_%sHz_%s',num2str(sampleFrequency),...
                                     num2str(samplePoints));

%%
% II. Simulate the models with the length perturbation
%%

flag_setNominalForceUsingKBR1994 = 0; %To do: re-run this set to 0 for all.
nominalForceSteps                = 3;
nominalForceIndex5N              = 2;
nominalForceKDFit                = 5;
nominalForce                     = [2.5,nominalForceKDFit,11.5];


flag_runOneSimulation       = 0;

if(flag_fitToFig3KirchBoskovRymer1994)
  nominalForceSteps                = 1;
  nominalForceIndex5N              = 1;
  nominalForceKDFit                = 5;
  nominalForce                     = [nominalForceKDFit];  
end

%%
% III. Calculate the frequency response of the model. 
%%

flag_frequencyAnalysisTest        = 1;
flag_frequencyAnalysisPlotInput   = 1;
flag_frequencyAnalysisTestCalcAll = 1;                                         
flag_frequencyAnalysisPlotOne     = 1;
                  
noiseAmplitude = 0.0; % Percent of signal, only for flag_frequencyAnalysisTest


flag_frequencyAnalysisMuscleModelsPlotKD   = 0;
flag_frequencyAnalysisMuscleModelsPlotAll  = 0;

%%
% IV. Post processing: generate plots
%%

flag_pubPlotInput                        = 1;


%%
% Configure the simulation run
%%


if(flag_runOneSimulation==1 && flag_fitToFig3KirchBoskovRymer1994==0)
  amplitudeMM = [0.8]'; %Amplitude scaling in mm
  bandwidthHz = [35]'; %bandwidth in Hz;
end
if(flag_fitToFig3KirchBoskovRymer1994 == 1)
  amplitudeMM = [1.6]'; %Amplitude scaling in mm
  bandwidthHz = [15,  90]'; %bandwidth in Hz;  
end

normFiberLength         = 1.0;%[1.07];

%From Herzog & Leonard this is the length at which a relaxed cat soleus
%begins to develop passive tension. This should correspond to the location
%where Kirsch, Boskov, and Rymer defined the base line. To quote from pg
%759 column 1 from Kirsch et al. near the bottom 
%
%
%     Baseline muscle length was measured relative to anatomical
%     markers attached to the tendon prior to detachment from the
%     calcaneum; in all experiments, baseline muscle length was
%     fixed at the value where tendon slack was taken up and a small
%     passive force just became evident. In terms of the anatomical
%     measure, baseline length ranged from 13 to 6 mm short of
%     maximum physiological length across muscles, and since the
%     maximum stretch beyond baseline in any trial was 1.6 mm,
%     muscle length was never greater than 4.4 mm short of its
%     maximum physiological value.


%%
% Configure the muscle models
%%


flag_useFiberDampingHill    = 1; %Appears not to affect results
scaleHillFpe                = 1; %Appears not to affect results

if(flag_useElasticTendon==0)
  flag_useFiberDampingHill = 0;
end

                           
scaleSlidingTimeConstant       = 1;
scaleCrossBridgeCyclingDamping = 1;

%normTendonDampingLinear   = 0.15; %Linearly varies with tendon stiffness
%normTendonDampingConstant = 0.0;  %Constant
% When damping and stiffness co-vary the resulting signal is not LTI and 
% the phase-frequency plot looks quite jagged. I can get improved results 
% if I define a C2 curve for tendon damping that starts at 0 and smoothly 
% goes to 1 (with a slope of zero)  at the end of the toe region.

                        
dataFolder = 'experiments/KirschBoskovRymer1994/';
plotFolder = 'output/plots/KirschBoskovRymer1994/';
tableFolder= 'output/tables/KirschBoskovRymer1994/';

%%
%Fitting Data
%%
fittingFilesGain      = 'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig3_gain.csv';
fittingFilesPhase     = 'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig3_phase.csv';
fittingFilesCoherence = 'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig3_coherence.csv';
fittingFilesK = {'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig9A.csv',...
                 'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig9B.csv',...
                 'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig12_K.csv'}; 
fittingFilesD = {'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig10.csv',...
                 'experiments/KirschBoskovRymer1994/data/fig_KirschBoskovRymer1994_Fig12_D.csv'}; 



dataKBR1994Fig3Force = 5; %N, as mentioned in the caption

dataKBR1994Fig3Gain = loadDigitizedData(fittingFilesGain,...
                        'Frequency (Hz)','Stiffness (N/mm)',...
                        {'1.6mm, 90Hz','1.6mm, 15Hz'},'');
dataKBR1994Fig3Phase = loadDigitizedData(fittingFilesPhase,...
                         'Frequency (Hz)','Phase (deg)',...
                         {'1.6mm, 90Hz','1.6mm, 15Hz'},'');
dataKBR1994Fig3Coherence = loadDigitizedData(fittingFilesCoherence,...
                          'Frequency (Hz)','Coherence$$^2$$',...
                          {'1.6mm, 90Hz','1.6mm, 15Hz'},'');

dataKBR1994Fig9A = loadDigitizedData(fittingFilesK{1},...
                      'Force (N)','K (N/mm)',...
                      {'0.4mm 15Hz','0.8mm 15Hz','1.6mm 15Hz'},'');
                    
dataKBR1994Fig9B = loadDigitizedData(fittingFilesK{2},...
                      'Force (N)','K (N/mm)',...
                      {'0.4mm 15Hz','0.4mm 35Hz','0.4mm 90Hz',...
                       '1.6mm 15Hz','1.6mm 35Hz','1.6mm 90Hz'},'');

dataKBR1994Fig10 = loadDigitizedData(fittingFilesD{1},...
                      'Force (N)','K (N/mm/s)',...
                      {'15Hz','35Hz','90Hz'},'');
                     
dataKBR1994Fig12K = loadDigitizedData(fittingFilesK{3},...
                          'Force (N)','K (N/mm)',...
                          {'Soleus','MG'},'0.8mm 35Hz');
                        
dataKBR1994Fig12D = loadDigitizedData(fittingFilesD{2},...
                          'Force (N)','B (N/mm/s)',...
                          {'Soleus','MG'},'0.8mm 35Hz');
                                                                         

                                               
flag_useOctave =0;
legendCellString = {''};


numberOfFunctions = length(amplitudeMM)*length(bandwidthHz);

dataKBR1994Fig12MaxForce = 0;
for i=1:1:length(dataKBR1994Fig12K)
  tmpMax = max(dataKBR1994Fig12K(i).x);
  if(tmpMax > dataKBR1994Fig12MaxForce)
    dataKBR1994Fig12MaxForce = tmpMax;
  end
end


if(flag_setNominalForceUsingKBR1994==1)
  nominalForce         = [1:1:nominalForceSteps] ...
                         .*(dataKBR1994Fig12MaxForce/nominalForceSteps);
end
if(flag_runOneSimulation==1)
  if(length(nominalForce) > 1)
    nominalForce = nominalForce(1,2);
  end
  nominalForceSteps=1;
end


activation        = [1:1:nominalForceSteps].*0;

numberOfSimulations = ...
  numberOfFunctions*length(nominalForce)*length(normFiberLength);


                   

                 
%%
% Generate/get the desired perturbation waveforms
%%

inputFunctions = getPerturbationWaveforms(amplitudeMM,...
                                          bandwidthHz,...
                                          samplePoints,...
                                          paddingPoints,...
                                          sampleFrequency,...
                                          dataFolder,...
                                          flag_generateRandomInput,...
                                          flag_processInputFunctions,...
                                          flag_usingOctave);



%%
% Plotting
%%
if(flag_plotInput ==1)
  [success] = plotPerturbationWaveforms(inputFunctions,...
                                        amplitudeMM,...
                                        bandwidthHz,...
                                        plotLayoutSettings);  
end

if(flag_pubPlotInput==1)
  [success] = plotPerturbationWaveformsPUB(inputFunctions,...
    plotFolder,...
    plotLayoutSettings);
end



%%
% Run the test code to fit a spring-damper to the calculated
% gain and phase responses.
%%
% flag_testFunction = 1;
% 
% if(flag_frequencyAnalysisTest==1)
%   [success] = calcSignalGainAndPhaseTEST(...
%                   inputFunctions, ...
%                   amplitudeMM,...
%                   bandwidthHz,...
%                   noiseAmplitude,...
%                   flag_frequencyAnalysisTestCalcAll,...                                          
%                   flag_frequencyAnalysisPlotInput,...
%                   flag_frequencyAnalysisPlotOne,...
%                   plotLayoutSettings,...
%                   plotFolder,...                  
%                   flag_usingOctave);
% end


%%
% Load the muscle and sarcomere properties of the cat soleus
% 
% Kirsch, Boskov & Rymer mention that the soleus rest length is
% 13 mm to 6 mm short of the 'maximum physiological length'. I have
% no idea how the 'maximum physiological length' is defined. I'm going
% to start the simulations at the optimal fiber length for now.
%%



tmp = load('output/structs/defaultFelineSoleus.mat');
musculotendonProperties   = tmp.defaultFelineSoleus.musculotendon;
sarcomereProperties       = tmp.defaultFelineSoleus.sarcomere;
normMuscleCurves          = tmp.defaultFelineSoleus.curves;

normMuscleCurves.useCalibratedCurves=flag_useCalibratedOpus31Curves;

normTendonDampingConstant = ...
    musculotendonProperties.normTendonDampingConstant;
normTendonDampingLinear = ...
    musculotendonProperties.normTendonDampingLinear;

flag_updateNormFiberLengthByTendonStretch = 1;
nominalNormFiberLengthAtSlack = normFiberLength;

[musculotendonPropertiesOpus31,sarcomerePropertiesOpus31] = ...
  updateOpus31CrossBridgeParameters(nominalForceKDFit,...
                                    nominalNormFiberLengthAtSlack,...
                                    flag_fitToFig3KirchBoskovRymer1994,...
                                    dataKBR1994Fig3Gain,...
                                    dataKBR1994Fig3Phase,...
                                    dataKBR1994Fig12K,...
                                    dataKBR1994Fig12D,...
                                    normTendonDampingConstant,...
                                    normTendonDampingLinear,...
                                    scaleSlidingTimeConstant,...
                                    scaleCrossBridgeCyclingDamping,...
                                    flag_useElasticTendon,...
                                    musculotendonProperties,...
                                    sarcomereProperties,...
                                    normMuscleCurves,...
                                    flag_usingOctave);
                                  
[musculotendonPropertiesOpus31_RT,sarcomerePropertiesOpus31_RT] = ...
  updateOpus31CrossBridgeParameters(nominalForceKDFit,...
                                    nominalNormFiberLengthAtSlack,...
                                    flag_fitToFig3KirchBoskovRymer1994,...
                                    dataKBR1994Fig3Gain,...
                                    dataKBR1994Fig3Phase,...
                                    dataKBR1994Fig12K,...
                                    dataKBR1994Fig12D,...
                                    normTendonDampingConstant,...
                                    normTendonDampingLinear,...
                                    scaleSlidingTimeConstant,...
                                    scaleCrossBridgeCyclingDamping,...
                                    0,...
                                    musculotendonProperties,...
                                    sarcomereProperties,...
                                    normMuscleCurves,...
                                    flag_usingOctave);                                  
                                  
[musculotendonPropertiesOpus31_ET,sarcomerePropertiesOpus31_ET] = ...
  updateOpus31CrossBridgeParameters(nominalForceKDFit,...
                                    nominalNormFiberLengthAtSlack,...
                                    flag_fitToFig3KirchBoskovRymer1994,...
                                    dataKBR1994Fig3Gain,...
                                    dataKBR1994Fig3Phase,...
                                    dataKBR1994Fig12K,...
                                    dataKBR1994Fig12D,...
                                    normTendonDampingConstant,...
                                    normTendonDampingLinear,...
                                    scaleSlidingTimeConstant,...
                                    scaleCrossBridgeCyclingDamping,...
                                    1,...
                                    musculotendonProperties,...
                                    sarcomereProperties,...
                                    normMuscleCurves,...
                                    flag_usingOctave);   

musculotendonProperties   = musculotendonPropertiesOpus31_RT;
sarcomereProperties       = sarcomerePropertiesOpus31_RT;

felineSoleusRigidTendonKBR1994 = tmp.defaultFelineSoleus;
felineSoleusRigidTendonKBR1994.musculotendon = musculotendonPropertiesOpus31_RT;
felineSoleusRigidTendonKBR1994.sarcomere     = sarcomerePropertiesOpus31_RT;

figNameGainPhase = 'Fig12';
if(flag_fitToFig3KirchBoskovRymer1994==1)
  figNameGainPhase = 'Fig3';  
end

save(['output/structs/felineSoleusRigidTendonKBR1994',figNameGainPhase,'.mat'],...
      'felineSoleusRigidTendonKBR1994');

felineSoleusElasticTendonKBR1994 = tmp.defaultFelineSoleus;
felineSoleusElasticTendonKBR1994.musculotendon=musculotendonPropertiesOpus31_ET;
felineSoleusElasticTendonKBR1994.sarcomere    =sarcomerePropertiesOpus31_ET;

save(['output/structs/felineSoleusElasticTendonKBR1994',figNameGainPhase,'.mat'],...
      'felineSoleusElasticTendonKBR1994');
    
                                     
%%
% Create the text tags that capture the configuration of the model
% and simulation: used the automatically generate unique informative file
% names.
%%

generateModelSpecificKeyWords;



%%
% Create a unique set of file names for the Hill model and Opus 31
%%
outputFileEndingOpus31    = '';
outputFileEndingOpus31_ET = '';
outputFileEndingOpus31_RT = '';

outputFileEndingOpus31_ET = sprintf('_K%sD%sTau%s_KTC%s_KTL%s_%iA%iL%iB%iD_%s',...
  kScaleStr_ET, dScaleStr_ET, tScaleStr, kTConstStr, kTLinearStr,...
  length(nominalForce),length(normFiberLength),...
  length(bandwidthHz),length(amplitudeMM),...
  strFittingBandwidth);%'_Std_5A1L3B3D_Descending';  

outputFileEndingOpus31_RT = sprintf('_K%sD%sTau%s_%iA%iL%iB%iD_%s',...
  kScaleStr_RT, dScaleStr_RT, tScaleStr, ...
  length(nominalForce),length(normFiberLength),...
  length(bandwidthHz),length(amplitudeMM),...
  strFittingBandwidth);%'_Std_5A1L3B3D_Descending';

if(flag_useElasticTendon==1)
  outputFileEndingOpus31 = outputFileEndingOpus31_ET;
else
  outputFileEndingOpus31 = outputFileEndingOpus31_RT;
end

scaleHillFpeStr = sprintf('%1.2f',scaleHillFpe);
z=strfind(scaleHillFpeStr,'.');
scaleHillFpeStr = [scaleHillFpeStr(1,1:(z-1)),'p',scaleHillFpeStr(1,(z+1))];

outputFileEndingHill = sprintf('_D%i_FPE%s_%iA%iL%iB%iD',...
  flag_useFiberDampingHill,scaleHillFpeStr,...
  length(nominalForce),length(normFiberLength),...
  length(bandwidthHz),length(amplitudeMM));

outputFileEndingHill_RT = ...
  sprintf('_D%i_FPE%s_%iA%iL%iB%iD',...
    0,scaleHillFpeStr,...
    length(nominalForce),length(normFiberLength),...
    length(bandwidthHz),length(amplitudeMM));
outputFileEndingHill_ET = ...
  sprintf('_D%i_FPE%s_%iA%iL%iB%iD',...
    1,scaleHillFpeStr,...
    length(nominalForce),length(normFiberLength),...
    length(bandwidthHz),length(amplitudeMM));

if(length(normFiberLength) == 1)
  if( abs(normFiberLength(1)-1) < sqrt(eps))
      outputFileEndingOpus31_RT = [outputFileEndingOpus31_RT,'_opt'];
      outputFileEndingHill_RT = [outputFileEndingHill_RT,'_opt'];      
      outputFileEndingOpus31_ET = [outputFileEndingOpus31_ET,'_opt'];
      outputFileEndingHill_ET = [outputFileEndingHill_ET,'_opt'];    
      
      outputFileEndingOpus31 = [outputFileEndingOpus31,'_opt'];
      outputFileEndingHill = [outputFileEndingHill,'_opt'];            
  end
  if( (normFiberLength(1)-1) > sqrt(eps))
      outputFileEndingOpus31_RT = [outputFileEndingOpus31_RT,'_des'];    
      outputFileEndingHill_RT = [outputFileEndingHill_RT,'_des'];
      outputFileEndingOpus31_ET = [outputFileEndingOpus31_ET,'_des'];    
      outputFileEndingHill_ET = [outputFileEndingHill_ET,'_des'];      

      outputFileEndingOpus31 = [outputFileEndingOpus31,'_des'];
      outputFileEndingHill = [outputFileEndingHill,'_des'];                  
  end
  if( (normFiberLength(1)-1) < -sqrt(eps))
      outputFileEndingOpus31_RT = [outputFileEndingOpus31_RT,'_asc'];    
      outputFileEndingHill_RT = [outputFileEndingHill_RT,'_asc'];
      outputFileEndingOpus31_ET = [outputFileEndingOpus31_ET,'_asc'];    
      outputFileEndingHill_ET = [outputFileEndingHill_ET,'_asc'];      

      outputFileEndingOpus31 = [outputFileEndingOpus31,'_asc'];
      outputFileEndingHill = [outputFileEndingHill,'_asc'];                  
  end  
end

%%
% File selector that selects previously computed solutions with 
% the matching configuration
%%

seriesNameTendon      = '';
seriesNameTendon_ET   = '_ElasticTendon';
seriesNameTendon_RT   = '_RigidTendon';
  
if(flag_useElasticTendon ==1)
  seriesNameTendon = seriesNameTendon_ET;
else  
  seriesNameTendon = seriesNameTendon_RT;
end

simSeriesFiles     = {   ['benchRecordHill',  seriesNameTendon,    outputFileEndingHill,     '.mat'],...
                         ['benchRecordOpus31',seriesNameTendon,    outputFileEndingOpus31,   '.mat']};
simSeriesFiles_RT  = {   ['benchRecordHill',  seriesNameTendon_RT, outputFileEndingHill_RT,  '.mat'],...
                         ['benchRecordOpus31',seriesNameTendon_RT, outputFileEndingOpus31_RT,'.mat']};
simSeriesFiles_ET  = {   ['benchRecordHill',  seriesNameTendon_ET, outputFileEndingHill_ET,  '.mat'],...
                         ['benchRecordOpus31',seriesNameTendon_ET, outputFileEndingOpus31_ET,'.mat']};
                       
simSeriesNames  = {'Hill ','Model '};    
simSeriesColors = [0.796, 0.255, 0.329;...
                     0, 0.137, 0.800];                 

simSeriesNames_RT  = {'Hill RT','Model RT'};    
simSeriesColors_RT = [0.796, 0.255, 0.329;...
                     0, 0.137, 0.800];                 
simSeriesNames_ET  = {'Hill ET','Model ET'};    
simSeriesColors_ET = [0.796, 0.255, 0.329;...
                     0, 0.137, 0.800];                 
                   
                   
freqSeriesFiles    = {   ['freqResponseHill',  seriesNameTendon, outputFileEndingHill,      '.mat'],...
                         ['freqResponseOpus31',seriesNameTendon, outputFileEndingOpus31,    '.mat']};                   
freqSeriesFiles_RT = {   ['freqResponseHill',  seriesNameTendon_RT, outputFileEndingHill_RT,   '.mat'],...
                         ['freqResponseOpus31',seriesNameTendon_RT, outputFileEndingOpus31_RT, '.mat']};
freqSeriesFiles_ET = {   ['freqResponseHill',  seriesNameTendon_ET, outputFileEndingHill_ET,   '.mat'],...
                         ['freqResponseOpus31',seriesNameTendon_ET, outputFileEndingOpus31_ET, '.mat']};

freqSeriesName  = simSeriesNames;    
freqSeriesColor = simSeriesColors;    

freqSeriesName_RT  = simSeriesNames_RT;    
freqSeriesColor_RT = simSeriesColors_RT;    
freqSeriesName_ET  = simSeriesNames_ET;    
freqSeriesColor_ET = simSeriesColors_ET;    


%%
% Simulate the perturbation experiments
%%
if(flag_simulateOpus31Model==1)
  [success] = runKirschBoskovRymer1994SimulationsOpus31(...
                            inputFunctions,...                          
                            normFiberLength,...
                            nominalForce,...
                            amplitudeMM,...
                            bandwidthHz,... 
                            numberOfSimulations,...
                            flag_useElasticTendon,...
                            musculotendonPropertiesOpus31,...
                            sarcomerePropertiesOpus31,...
                            normMuscleCurves,...
                            outputFileEndingOpus31, ...
                            dataFolder,...
                            flag_useOctave);

end

if(flag_simulateHillModel == 1)

  [success] = runKirschBoskovRymer1994SimulationsDampedEquilibrium( ...
                            inputFunctions,...                          
                            normFiberLength,...
                            nominalForce,...
                            amplitudeMM,...
                            bandwidthHz,... 
                            numberOfSimulations,...
                            flag_useElasticTendon,...
                            flag_useFiberDampingHill,...
                            scaleHillFpe,...
                            musculotendonProperties,...
                            sarcomereProperties,...
                            normMuscleCurves,...
                            outputFileEndingHill, ...
                            dataFolder,...
                            flag_usingOctave);
end







%%
% Evaluate the gain and phase shift of the muscle models based on the
% simulation data.
%%

if(flag_frequencyAnalysisMuscleModels==1)
[success] = calcSignalGainAndPhase(...
                        normFiberLength,...
                        nominalForce,...                        
                        activation,...
                        amplitudeMM,...
                        bandwidthHz,...
                        numberOfSimulations,...
                        inputFunctions,...  
                        simSeriesFiles,...   
                        simSeriesNames,...
                        simSeriesColors,...
                        dataFolder,...
                        flag_frequencyAnalysisMuscleModelsPlotKD,...
                        flag_frequencyAnalysisMuscleModelsPlotAll,...
                        flag_usingOctave);
end                      

%%
% Post processing
%%
if(flag_pubPlotFrequencyResponseKBR1994Fig3==1)
 
  for z=0:1:2
    flag_Mode15Hz90HzBoth = z;
    [success] = plotFrequencyResponsePUB20191227(...
                          dataFolder,...
                          freqSeriesFiles_RT,...
                          freqSeriesName_RT,...
                          freqSeriesColor_RT,...
                          freqSeriesFiles_ET,...
                          freqSeriesName_ET,...
                          freqSeriesColor_ET,...                        
                          inputFunctions,...
                          normFiberLength,...
                          nominalForce,...
                          nominalForceIndex5N,...
                          dataKBR1994Fig3Gain,...
                          dataKBR1994Fig3Phase,...
                          flag_useElasticTendon,... 
                          flag_Mode15Hz90HzBoth,...
                          strFittingBandwidth,...
                          plotLayoutSettings,...
                          plotFolder); 
  end
  
  [success] = plotFrequencyResponsePUB(...
                        dataFolder,...
                        freqSeriesFiles,...
                        freqSeriesName,...
                        freqSeriesColor,...                  
                        inputFunctions,...
                        normFiberLength,...
                        nominalForce,...
                        nominalForceIndex5N,...
                        dataKBR1994Fig3Gain,...
                        dataKBR1994Fig3Phase,...
                        flag_useElasticTendon,...    
                        strFittingBandwidth,...
                        plotLayoutSettings,...
                        plotFolder);                        
end

if(flag_pubPlotStiffnessDampingKBR1994Fig9Fig10 == 1)
  [success] = plotStiffnessDampingVariationPUB(...
                        dataFolder,...
                        freqSeriesFiles,...
                        freqSeriesName,...
                        freqSeriesColor,...
                        inputFunctions,...                      
                        normFiberLength,...
                        nominalForce,...  
                        dataKBR1994Fig9A,...
                        dataKBR1994Fig9B,...   
                        dataKBR1994Fig10,...   
                        flag_useElasticTendon,...
                        strFittingBandwidth,...
                        plotLayoutSettings,...
                        plotFolder);  
end



if(flag_pubPlotStiffnessDampingKBR1994Fig12==1)
  [success] = plotStiffnessDampingPUB20191227(...
                        dataFolder,...
                        freqSeriesFiles_RT,...
                        freqSeriesName_RT,...
                        freqSeriesColor_RT,...
                        freqSeriesFiles_ET,...
                        freqSeriesName_ET,...
                        freqSeriesColor_ET,...                        
                        inputFunctions,...                      
                        normFiberLength,...
                        nominalForce,...  
                        dataKBR1994Fig12K,...
                        dataKBR1994Fig12D,...   
                        flag_useElasticTendon,...
                        strFittingBandwidth,...
                        plotLayoutSettings,...
                        plotFolder);
                      
  [success] = plotStiffnessDampingPUB(...
                        dataFolder,...
                        freqSeriesFiles,...
                        freqSeriesName,...
                        freqSeriesColor,...
                        inputFunctions,...                      
                        normFiberLength,...
                        nominalForce,...  
                        dataKBR1994Fig12K,...
                        dataKBR1994Fig12D,...   
                        flag_useElasticTendon,... 
                        strFittingBandwidth,...
                        plotLayoutSettings,...
                        plotFolder);
end

if(  flag_plotAccelerationEquationFactors==1 )
%  for z=0:1:2
    flag_Mode15Hz90HzBoth = 2;    
    [success] = plotAccelerationEquationFactorsOpus31( ...
                        dataFolder,...
                            freqSeriesFiles_RT,...
                            freqSeriesName_RT,...
                            freqSeriesColor_RT,...
                            freqSeriesFiles_ET,...
                            freqSeriesName_ET,...
                            freqSeriesColor_ET,...                         
                        simSeriesFiles_RT,...
                        simSeriesNames_RT,...
                        simSeriesColors_RT,...
                        simSeriesFiles_ET,...
                        simSeriesNames_ET,...
                        simSeriesColors_ET,...                           
                          inputFunctions,...
                          normFiberLength,...
                          nominalForce,...
                          nominalForceIndex5N,...
                          flag_useElasticTendon,... 
                          flag_Mode15Hz90HzBoth,...
                          strFittingBandwidth,...
                          plotLayoutSettings,...
                          plotFolder);
%  end
end


if(flag_pubTabulateStiffnessDampingVariation==1)
  [success] = tabulateStiffnessDampingVariationPUB(dataFolder,...
                                                freqSeriesFiles,...
                                                freqSeriesName,...
                                                freqSeriesColor,...
                                                inputFunctions,...                      
                                                normFiberLength,...
                                                nominalForce,...  
                                                dataKBR1994Fig9A,...
                                                dataKBR1994Fig9B,... 
                                                dataKBR1994Fig10,...
                                                dataKBR1994Fig12K,...
                                                dataKBR1994Fig12D,...
                                                flag_useElasticTendon,...
                                                strFittingBandwidth,...
                                                tableFolder);  
end



rmpath(parametersDirectoryTree       );
rmpath(curvesDirectoryTree           );
rmpath(experimentsDirectoryTree      );
rmpath(simulationDirectoryTree       );
rmpath(modelDirectoryTree            );
rmpath(postprocessingDirectoryTree   );