%%
% SPDX-FileCopyrightText: 2023 Matthew Millard <millard.matthew@gmail.com>
%
% SPDX-License-Identifier: MIT
%
% If you use this code in your work please cite the pre-print of this paper
% or the most recent peer-reviewed version of this paper:
%
%    Matthew Millard, David W. Franklin, Walter Herzog. 
%    A three filament mechanistic model of musculotendon force and impedance. 
%    bioRxiv 2023.03.27.534347; doi: https://doi.org/10.1101/2023.03.27.534347 
%
%%

function [defaultRabbitEDL,...
          activeForceLengthCurveAnnotationPoints,...
          rabbitEDLActiveForceLengthDataDefault,...
          rabbitEDLPassiveForceLengthDataDefault,...
          rabbitEDLPassiveForceLengthCurveSettings ] =...
            createRabbitExtensorDigitorumLongusModel(...
                  normPevkToActinAttachmentPoint,...
                  normMaxActiveTitinToActinDamping,...
                  normFiberLengthAtOneNormPassiveForce,...
                  ecmForceFraction,...
                  useWLCTitinModel,...                                      
                  useCalibratedCurves,...
                  useTwoSidedTitinCurves,...
                  smallNumericallyNonZeroNumber,...
                  flag_enableNumericallyNonZeroGradients,...
                  scaleOptimalFiberLength,...
                  scaleMaximumIsometricTension,...
                  projectFolders,...
                  flag_useOctave)

%Siebert T, Leichsenring K, Rode C, Wick C, Stutzig N, Schubert H, 
% Blickhan R, Böl M. Three-dimensional muscle architecture and 
% comprehensive dynamic properties of rabbit gastrocnemius, plantaris and 
% soleus: input for simulation studies. PLoS one. 
% 2015 Jun 26;10(6):e0130985.

titinMolecularWeightInkD = [];

% Check the arguments
if( smallNumericallyNonZeroNumber <= 0 &&...
    flag_enableNumericallyNonZeroGradients  )
  disp('Warning: flag_enableNumericallyNonZeroGradients is set to 1 and');
  disp('         smallNumericallyNonZeroNumber <= 0');
  disp('Setting smallNumericallyNonZeroNumber to be sqrt(sqrt(eps))');
  smallNumericallyNonZeroNumber = sqrt(sqrt(eps));
end

if(isempty(normPevkToActinAttachmentPoint))
  normPevkToActinAttachmentPoint        = 0.5;

  disp('normPevkToActinAttachmentPoint empty using default:');  
  fprintf('\t%f\n',normPevkToActinAttachmentPoint);
end

if(isempty(normFiberLengthAtOneNormPassiveForce))
  normFiberLengthAtOneNormPassiveForce        = 1.367732948060934e+00;

  disp('normFiberLengthAtOneNormPassiveForce empty using default');
  fprintf('\t%f\n',normFiberLengthAtOneNormPassiveForce);
end


disp('Rabbit EDL: normFiberLengthAtOneNormPassiveForce needs to be adjusted');

[ rabbitEDLMusculotendonProperties, ...
  rabbitEDLSarcomereProperties,...
  rabbitEDLActiveForceLengthData,...
  rabbitEDLPassiveForceLengthData] = ...
    createRabbitExtensorDigitorumLongusParameters(  ...
                        scaleOptimalFiberLength,...
                        scaleMaximumIsometricTension,...
                        normFiberLengthAtOneNormPassiveForce,...
                        normPevkToActinAttachmentPoint,...
                        normMaxActiveTitinToActinDamping,...
                        ecmForceFraction,...
                        titinMolecularWeightInkD,...
                        projectFolders,...
                        flag_useOctave);



createMusculoTendonFcn = ...
  @(argScaleFiberLength,argScaleFiso)createRabbitExtensorDigitorumLongusParameters(...
                                        argScaleFiberLength,...
                                        argScaleFiso,...
                                        normFiberLengthAtOneNormPassiveForce,...
                                        normPevkToActinAttachmentPoint,...
                                        normMaxActiveTitinToActinDamping,...
                                        ecmForceFraction,...
                                        projectFolders,...
                                        flag_useOctave); 
                                        


%We have no data to fit to, and so these options cannot be used
flag_solveForOptimalFiberLengthOfBestFit         = 0; 
shiftLengthActiveForceLengthCurveDescendingCurve = 0.;

[rabbitEDLNormMuscleCurvesDefault,...
 rabbitEDLMusculotendonPropertiesDefault,...
 rabbitEDLSarcomerePropertiesDefault,... 
 activeForceLengthCurveAnnotationPoints,...
 rabbitEDLActiveForceLengthDataDefault,...
 rabbitEDLPassiveForceLengthDataDefault,...
 rabbitEDLPassiveForceLengthCurveSettings]= ...
    createFittedMuscleCurves( ...
      rabbitEDLMusculotendonProperties,...
      rabbitEDLSarcomereProperties,...
      useWLCTitinModel,...      
      useCalibratedCurves,...
      useTwoSidedTitinCurves,...
      rabbitEDLActiveForceLengthData,...
      rabbitEDLPassiveForceLengthData,...
      shiftLengthActiveForceLengthCurveDescendingCurve,...
      flag_enableNumericallyNonZeroGradients,...
      smallNumericallyNonZeroNumber,...
      flag_solveForOptimalFiberLengthOfBestFit,...
      createMusculoTendonFcn,...
      flag_useOctave);



% Some muscles appear to have a minimum length for developing linear
% eccentric force profiles, others not. Here we set the default to 
% be the start of the passive-force-length curve and adjust as needed
%
%Tomalka A. Eccentric muscle contractions: from single muscle fibre to 
%whole muscle mechanics. Pflügers Archiv-European Journal of Physiology. 
%2023 Apr;475(4):421-35.

%I had trouble replicating Hasselman et al. And so I'm adjusting the 
%minimum bond location.
rabbitEDLSarcomerePropertiesDefault.normLengthTitinActinBondMinimum = 0.8;


%Update the active-force-length curve using a function designed to take
%Siebert et al.'s coefficients
l1N = 0.39;
l2N = 0.82;
l3N = 1.21;
l4N = 2.03;
fcN = 0.91;
curviness = 0.75;
flag_compensateForCrossbridgeStiffness = 0;
flag_enableNumericallyNonZeroGradient  = 1;
smallNumericallyNonZeroNumber = sqrt(sqrt(eps));
computeIntegral     = 0;
muscleName          = 'activeForceLengthCurveSiebert2015';
flag_usingOctave    = 0;

[activeForceLengthCurve, ...
  activeForceLengthCurveAnnotationPoints]= ...
  createSiebert2015FiberActiveForceLengthCurve(...
      l1N, l2N, l3N, l4N, fcN,...
      rabbitEDLSarcomereProperties.normCrossBridgeStiffness,...
      curviness, ...
      flag_compensateForCrossbridgeStiffness,...
      flag_enableNumericallyNonZeroGradient, ...
      smallNumericallyNonZeroNumber,...
      computeIntegral, ...
      muscleName, ...
      flag_usingOctave);

rabbitEDLNormMuscleCurvesDefault.activeForceLengthCurve = ...
        activeForceLengthCurve;

flag_compensateForCrossbridgeStiffness = 1;

[activeForceLengthCalibratedCurve, ...
  activeForceLengthCurveAnnotationPointsCal]= ...
  createSiebert2015FiberActiveForceLengthCurve(...
      l1N, l2N, l3N, l4N, fcN,...
      rabbitEDLSarcomereProperties.normCrossBridgeStiffness,...
      curviness, ...
      flag_compensateForCrossbridgeStiffness,...
      flag_enableNumericallyNonZeroGradient, ...
      smallNumericallyNonZeroNumber,...
      computeIntegral, ...
      muscleName, ...
      flag_usingOctave);

rabbitEDLNormMuscleCurvesDefault.activeForceLengthCalibratedCurve = ...
       activeForceLengthCalibratedCurve;

defaultRabbitEDL = struct('musculotendon',...
                            rabbitEDLMusculotendonPropertiesDefault,...
                            'sarcomere',...
                            rabbitEDLSarcomerePropertiesDefault,...
                            'falData',...
                            rabbitEDLActiveForceLengthDataDefault,...
                            'fpeData',...
                            rabbitEDLPassiveForceLengthDataDefault,...
                            'curves',...
                            rabbitEDLNormMuscleCurvesDefault,...
                            'fitting',...
                            []);
              


   
