%%
% SPDX-FileCopyrightText: 2023 Matthew Millard <millard.matthew@gmail.com>
%
% SPDX-License-Identifier: MIT
%
% If you use this code in your work please cite the pre-print of this paper
% or the most recent peer-reviewed version of this paper:
%
%    Matthew Millard, David W. Franklin, Walter Herzog. 
%    A three filament mechanistic model of musculotendon force and impedance. 
%    bioRxiv 2023.03.27.534347; doi: https://doi.org/10.1101/2023.03.27.534347 
%
%%

function [sarcomerePropertiesVexatUpd, normMuscleCurvesUpd] = ...
    updateActiveTitinParameters(musculotendonPropertiesVexat, ...
                             sarcomerePropertiesVexat,...
                             normMuscleCurves,...
                             passiveCurveSettings,...
                             expConfigHerzogLeonard2002,...
                             flag_useElasticTendon,...
                             projectFolders,...
                             flag_useOctave)

disp('fitActiveTitinParameters');
flag_computeCurveIntegrals=0;

dataFolder = fullfile(projectFolders.output_structs_HL2002,['fitting',filesep]);


%simParamsHL2002 = csvread('experiments/HerzogLeonard2002/simulationParametersHerzogLeonard2002.csv');
simParamsHL2002 = csvread([fullfile(projectFolders.experiments_HL2002,...
                            'simulationParametersHerzogLeonard2002.csv')]);
nominalNormalizedFiberLength = simParamsHL2002(1,1);

sarcomerePropertiesVexatUpd = sarcomerePropertiesVexat;
normMuscleCurvesUpd = normMuscleCurves;

%% Updated active titin parameters
%normPevkToActinAttachmentPoint      = 0.5;
%normMaxActiveTitinToActinDamping    = 20;

switch sarcomerePropertiesVexat.titinModelType
    case 0
        biParam = [sarcomerePropertiesVexatUpd.normPevkToActinAttachmentPoint;...
                   sarcomerePropertiesVexatUpd.normMaxActiveTitinToActinDamping];
    case 1

        sarcomerePropertiesVexatUpd.extraCellularMatrixPassiveForceFraction = 0.5;
        
        biParam = [sarcomerePropertiesVexatUpd.extraCellularMatrixPassiveForceFraction;...
                   sarcomerePropertiesVexatUpd.normActivePevkDamping];
    otherwise
        assert(0,'titinModelType must be 0 (sticky-spring) or 1 (stiff spring');
end
biNorm  = [1;1];
biDelta = biParam.*0.5;

%param0 = [1;1];
%paramNorm =  [normPevkToActinAttachmentPoint;...
%              normMaxActiveTitinToActinDamping];

errorStart=1;
errorEnd = 1;
errorSumSqNorm = 1;

flag_plot=0;
typeCostFunction = 2;

errorStart = calcActiveTitinParameterError(...
                        biParam,...
                        biNorm, ...
                        errorSumSqNorm,...
                        typeCostFunction,...
                        musculotendonPropertiesVexat, ...
                        sarcomerePropertiesVexatUpd,...
                        normMuscleCurvesUpd,...
                        passiveCurveSettings,...
                        expConfigHerzogLeonard2002,...
                        nominalNormalizedFiberLength,...
                        flag_useElasticTendon,...
                        dataFolder,...
                        1,...
                        flag_useOctave);


idxParam = 1;


for idxParam=1:1:2

    typeCostFunction = idxParam-1;
    error0 = calcActiveTitinParameterError(...
                        biParam,...
                        biNorm, ...                        
                        errorSumSqNorm,...
                        typeCostFunction,...
                        musculotendonPropertiesVexat, ...
                        sarcomerePropertiesVexatUpd,...
                        normMuscleCurvesUpd,...
                        passiveCurveSettings,...
                        expConfigHerzogLeonard2002,...
                        nominalNormalizedFiberLength,...
                        flag_useElasticTendon,...
                        dataFolder,...
                        flag_plot,...
                        flag_useOctave);    
    errBest = error0;

    fprintf('%1.2e\tStarting error, param %i\n',error0,idxParam);

    errorFcn = @(arg)calcActiveTitinParameterError(...
                        arg,...
                        biNorm, ...
                        errorSumSqNorm,...
                        typeCostFunction,...
                        musculotendonPropertiesVexat, ...
                        sarcomerePropertiesVexatUpd,...
                        normMuscleCurvesUpd,...
                        passiveCurveSettings,...
                        expConfigHerzogLeonard2002,...
                        nominalNormalizedFiberLength,...
                        flag_useElasticTendon,...
                        dataFolder,...                        
                        flag_plot,...
                        flag_useOctave);

    %Will get us within 2% of the best parameter value, as these parameters
    %are relatively independent
    for idxBisection=1:1:6
        biParamL = biParam;
        biParamL(idxParam,1) = biParamL(idxParam,1) - biDelta(idxParam,1); 
        errL = errorFcn(biParamL);
    
        biParamR = biParam;
        biParamR(idxParam,1) = biParamR(idxParam,1) + biDelta(idxParam,1); 
        errR = errorFcn(biParamR);
    
        if(errL < errR && errL < errBest )
            biParam = biParamL;
            errBest=errL;
        end
        if(errR < errL && errR < errBest )
            biParam = biParamR;
            errBest=errR;
        end
        biDelta(idxParam,1) = biDelta(idxParam,1)*0.5;
        fprintf('  %i\t%1.2e\n',idxBisection,errBest);
    end
    
    fprintf('%1.2e\tEnding error, param %i\n',errBest,idxParam);
    

end


% lb = [0.05;5]./paramNorm;
% ub = [0.95;100]./paramNorm;
% 
% fprintf('  Starting Error: %1.2e\n',1);
% options = optimoptions('fmincon','Display','iter',...
%                        'MaxFunctionEvaluations',60);
% 
% [x,fval,exitflag]=fmincon(errorFcn,param0,[],[],[],[],lb,ub,[],options);
% fprintf('  Ending Error  : %1.2e\n',fval);




typeCostFunction = 2;

errorEnd = calcActiveTitinParameterError(...
                        biParam,...
                        biNorm, ...
                        errorSumSqNorm,...
                        typeCostFunction,...
                        musculotendonPropertiesVexat, ...
                        sarcomerePropertiesVexatUpd,...
                        normMuscleCurvesUpd,...
                        passiveCurveSettings,...
                        expConfigHerzogLeonard2002,...
                        nominalNormalizedFiberLength,...
                        flag_useElasticTendon,...
                        dataFolder,...
                        1,...
                        flag_useOctave);

if( errorEnd < errorStart)
    fprintf('  updating sarcomere and curve structures\n');
    

    
    parameterA = biParam(1,1)*biNorm(1,1);
    parameterB = biParam(2,1)*biNorm(2,1);

    switch sarcomerePropertiesVexat.titinModelType
        case 0
            parameterA = min(parameterA,1);
            parameterA = max(parameterA,0);
            parameterB = max(parameterB,0);

            sarcomerePropertiesVexatUpd.normPevkToActinAttachmentPoint = ...
                parameterA;
            sarcomerePropertiesVexatUpd.normMaxActiveTitinToActinDamping = ...
                parameterB;

            fprintf('\t%e\t%s\n',parameterA,... 
                                'normPevkToActinAttachmentPoint');
            fprintf('\t%e\t%s\n',parameterB,... 
                                'normMaxActiveTitinToActinDamping');

        case 1
            parameterA = min(parameterA,1);
            parameterA = max(parameterA,0);
            parameterB = max(parameterB,0);

            sarcomerePropertiesVexatUpd.extraCellularMatrixPassiveForceFraction = ...
                parameterA;
            sarcomerePropertiesVexatUpd.normActivePevkDamping = ...
                parameterB;

            fprintf('\t%e\t%s\n',parameterA,... 
                                'extraCellularMatrixPassiveForceFraction');
            fprintf('\t%e\t%s\n',parameterB,... 
                                'normActivePevkDamping');

        otherwise
            assert(0,'titinModelType must be 0 (sticky-spring) or 1 (stiff spring');
    end    
    



    %% After an optimal value has been found, update the re

    if(sarcomerePropertiesVexat.titinModelType == 1)

        flag_computeCurveIntegrals=0;
         
        %Updated only 
        lambdaECM = sarcomerePropertiesVexatUpd.extraCellularMatrixPassiveForceFraction;  
    

        normMuscleCurvesUpd.forceLengthECMHalfCurve  = ...
          createFiberForceLengthCurve2021((passiveCurveSettings.normLengthZero)*0.5,...
                                      (passiveCurveSettings.normLengthToe)*0.5,...
                                      lambdaECM,...
                                      passiveCurveSettings.kZero*(lambdaECM*2),...
                                      passiveCurveSettings.kLow*(lambdaECM*2),...
                                      passiveCurveSettings.kToe*(lambdaECM*2),...
                                      passiveCurveSettings.curviness,...
                                      flag_computeCurveIntegrals,...
                                      musculotendonPropertiesVexat.name,...
                                      flag_useOctave);  
    
        normMuscleCurvesUpd.forceLengthECMHalfCurve.name = sprintf('%s.%s',...
          musculotendonPropertiesVexat.name,'forceLengthECMHalfCurve');

    end


    flag_useElasticIgD        = 1;
    flag_computeCurveIntegrals = 0;
    
    [normMuscleCurves.forceLengthProximalTitinCurve, ...
        normMuscleCurves.forceLengthProximalTitinInverseCurve,...
     normMuscleCurves.forceLengthDistalTitinCurve, ...
        normMuscleCurves.forceLengthDistalTitinInverseCurve,...
     normMuscleCurves.forceLengthIgPTitinCurve, ...
        normMuscleCurves.forceLengthIgPTitinInverseCurve,...
     normMuscleCurves.forceLengthPevkTitinCurve, ...
        normMuscleCurves.forceLengthPevkTitinInverseCurve,...
     normMuscleCurves.forceLengthIgDTitinCurve, ...
        normMuscleCurves.forceLengthIgDTitinInverseCurve] ...
              = createTitinCurves2022( normMuscleCurves.fiberForceLengthCurve,...                                   
                                       passiveCurveSettings,...
                                       normMuscleCurves.forceLengthECMHalfCurve,...
                                       sarcomerePropertiesVexatUpd,...
                                       musculotendonPropertiesVexat.name,...
                                       normMuscleCurves.useWLCTitinModel,...
                                       normMuscleCurves.useTwoSidedTitinCurves,...
                                       flag_computeCurveIntegrals,...
                                       flag_useElasticIgD,...
                                       sarcomerePropertiesVexatUpd.titinModelType,...
                                       flag_useOctave);
    


else
  fprintf('  NOT updating sarcomere and curve structures: no improvement\n');
end