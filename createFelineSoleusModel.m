function [defaultFelineSoleusModel,...
          activeForceLengthCurveAnnotationPoints,...
          felineSoleusActiveForceLengthDataDefault,...
          felineSoleusPassiveForceLengthDataDefault,...
          felineSoleusPassiveForceLengthCurveSettings]...
           = createFelineSoleusModel(normPevkToActinAttachmentPoint,...
                                    normMaxActiveTitinToActinDamping,...
                                    normFiberLengthAtOneNormPassiveForce,... 
                                    ecmForceFraction,...
                                    useWLCTitinModel,...
                                    useCalibratedCurves,...
                                    useTwoSidedTitinCurves,...
                                    smallNumericallyNonZeroNumber,...
                                    flag_enableNumericallyNonZeroGradients,... 
                                    scaleOptimalFiberLength,... 
                                    scaleMaximumIsometricTension,...
                                    flag_useOctave)

rigidTendonReferenceModel   = [];
elasticTendonReferenceModel = [];

%  flag_makeAndSavePubPlots                      = 1;



% 1. Active force length curve vs. data
% Solution: There were some initial descrepencies between the experimental force
%length data and a theoretical curve. These errors almost completely go
%away if it is assumed that the experimental recordings are of total 
%path length, rather than fiber length. In this case, when the elastiticy
%of the tendon is taken into account the theoretical active-force-length 
%curve and the transformed data nicely align.

%Failed attempt:
%This creates a cat soleus with an optimal fiber length of 58 mm: this
%is simply way too big to be realistic (given the data I'm working from)
flag_solveForOptimalFiberLengthOfBestFit  = 0; 

%Failed attempt:
shiftLengthActiveForceLengthCurveDescendingCurve = 0.;%...
%  (1/3)*( (1.154-1.087) + (1.23-1.162) + (1.077-1.039) );


%%
% Add the directories needed to run this script
%%

%if(exist('fitCrossBridgeStiffnessDampingToKirch199490Hz','var')==0)
%  fitCrossBridgeStiffnessDampingToKirch199490Hz = 1;
%end

[felineSoleusMusculotendonProperties, ...
 felineSoleusSarcomereProperties,...
 felineSoleusActiveForceLengthData,...
 felineSoleusPassiveForceLengthData] = ...
 createFelineSoleusParameters(    scaleOptimalFiberLength,...
                        scaleMaximumIsometricTension,...
                        normFiberLengthAtOneNormPassiveForce,...
                        normPevkToActinAttachmentPoint,...
                        normMaxActiveTitinToActinDamping,...
                        ecmForceFraction,...
                        flag_useOctave);

createMusculoTendonFcn = ...
  @(argScaleFiberLength,argScaleFiso)createFelineSoleusParameters(...
                                        argScaleFiberLength,...
                                        argScaleFiso,...
                                        normFiberLengthAtOneNormPassiveForce,...
                                        normPevkToActinAttachmentPoint,...
                                        normMaxActiveTitinToActinDamping,...
                                        ecmForceFraction,...
                                        flag_useOctave); 
                                        
[felineSoleusNormMuscleCurvesDefault,...
 felineSoleusMusculotendonPropertiesDefault,...
 felineSoleusSarcomerePropertiesDefault,... 
 activeForceLengthCurveAnnotationPoints,...
 felineSoleusActiveForceLengthDataDefault,...
 felineSoleusPassiveForceLengthDataDefault,...
 felineSoleusPassiveForceLengthCurveSettings]= ...
    createFittedMuscleCurves( ...
      felineSoleusMusculotendonProperties,...
      felineSoleusSarcomereProperties,...
      useWLCTitinModel,...
      useCalibratedCurves,...
      useTwoSidedTitinCurves,...
      felineSoleusActiveForceLengthData,...
      felineSoleusPassiveForceLengthData,...
      shiftLengthActiveForceLengthCurveDescendingCurve,...
      flag_enableNumericallyNonZeroGradients,...
      smallNumericallyNonZeroNumber,...
      flag_solveForOptimalFiberLengthOfBestFit,...
      createMusculoTendonFcn,...
      flag_useOctave);


%%
%Check to make sure that
% The normFiberLengthAtOneNormPassiveForce used to create keypoints for the
% titin model actually matches the norm fiber length at which the passive
% curve develops 1 normalized force.
%%
fpe2 = felineSoleusNormMuscleCurvesDefault.fiberForceLengthCurve.yEnd(1,2);
lpe2 = felineSoleusNormMuscleCurvesDefault.fiberForceLengthCurve.xEnd(1,2);
assert(abs(fpe2-1)<1e-3);
errLp2 = 1e-3;
if(isempty(felineSoleusPassiveForceLengthData)==0)
    errLp2 = 0.05;
end
assert(abs(lpe2-felineSoleusSarcomerePropertiesDefault.normFiberLengthAtOneNormPassiveForce)<errLp2);



defaultFelineSoleusModel = struct('musculotendon',...
                            felineSoleusMusculotendonPropertiesDefault,...
                            'sarcomere',...
                            felineSoleusSarcomerePropertiesDefault,...
                            'falData',...
                            felineSoleusActiveForceLengthDataDefault,...
                            'fpeData',...
                            felineSoleusPassiveForceLengthDataDefault,...
                            'curves',...
                            felineSoleusNormMuscleCurvesDefault,...
                            'fitting',...
                            []);
                      


%%
%% Update the active titin properties of the model to fit 
%%   a single trial of Herzog & Leonard 2002
%%

disp('Todo: delete this block once refactoring is done');
flag_useActiveTitinFittingFunction = 1;
disp('Delete these parameters once they are in the fitting functions');
flag_fitToFig3KirchBoskovRymer1994               = 0;
fitCrossBridgeStiffnessDampingToKirch199490Hz    = 1;
flag_fitActiveTitinProperties                    = 0;

if(flag_useActiveTitinFittingFunction==0)
%Fit the elastic tendon model.
    if(flag_fitActiveTitinProperties== 0 )
        if(isempty(elasticTendonReferenceModel)==0)
            disp('Using reference model');        
            tmp=load(elasticTendonReferenceModel);
            modelName = fields(tmp);
            felineSoleusSarcomerePropertiesUpd_ET= tmp.(modelName{1}).sarcomere;
            felineSoleusNormMuscleCurvesUpd_ET= tmp.(modelName{1}).curves;
        else
            %assert(0,['Error: flag_fitActiveTitinProperties is disabled ',...
            %    'but no elasticTendonReferenceModel is provided']);
            disp('Using default model');
            felineSoleusSarcomerePropertiesUpd_ET = felineSoleusSarcomerePropertiesDefault;
            felineSoleusNormMuscleCurvesUpd_ET    = felineSoleusNormMuscleCurvesDefault;
        end

    else
        %The parameters updated are the 
        %  :normPevkToActinAttachmentPoint (default of 0.5)
        %  :normMaxActiveTitinToActinDamping (default of 20)
        %
        %The hand-tuned default values are quite good, but fitting is required to
        %minimize the error. Since the process of both force development and 
        %relaxation are nonlinear, there is not an elegant and fast way to find 
        %these parameters without simulating the model directly. 
        
        figureNumber       = 7;
        subFigureNumber    = 2;
        trialNumber        = 3;  
        
        expConfigHerzogLeonard2002 =...
         getHerzogLeonard2002Configuration( figureNumber,...
                                            subFigureNumber, ...
                                            trialNumber);
        
        dataFolder = 'experiments/HerzogLeonard2002/fitting/';
        
        if(felineSoleusSarcomerePropertiesDefault.titinModelType==1)
            felineSoleusNormMuscleCurvesDefault.useTwoSidedTitinCurves=0;
        end
        felineSoleusNormMuscleCurvesDefault.useCalibratedCurves=useCalibratedCurves;
        flag_useElasticTendon       = 1;
        
        
        [felineSoleusSarcomerePropertiesUpd_ET,...
            felineSoleusNormMuscleCurvesUpd_ET] = ...
            updateActiveTitinParameters(felineSoleusMusculotendonPropertiesDefault, ...
                                     felineSoleusSarcomerePropertiesDefault,...
                                     felineSoleusNormMuscleCurvesDefault,...
                                     felineSoleusPassiveForceLengthCurveSettings,...
                                     expConfigHerzogLeonard2002,...
                                     flag_useElasticTendon,...
                                     dataFolder,...
                                     flag_fitActiveTitinProperties,...
                                     flag_useOctave);
        
            disp('felineSoleusSarcomerePropertiesUpd_ET');
            fprintf('\t%e\t%s\n',felineSoleusSarcomerePropertiesUpd_ET.normPevkToActinAttachmentPoint,... 
                                'normPevkToActinAttachmentPoint');
            fprintf('\t%e\t%s\n',felineSoleusSarcomerePropertiesUpd_ET.normMaxActiveTitinToActinDamping,... 
                                'normMaxActiveTitinToActinDamping');
    end

    %Fit the rigid tendon model
    if(flag_fitActiveTitinProperties== 0 )
        if(isempty(rigidTendonReferenceModel)==0)
            disp('Using default model');        
            tmp=load(rigidTendonReferenceModel);
            modelName = fields(tmp);
            felineSoleusSarcomerePropertiesUpd_RT= tmp.(modelName{1}).sarcomere;
            felineSoleusNormMuscleCurvesUpd_RT= tmp.(modelName{1}).curves;
        else
            disp('Using reference model');
            felineSoleusSarcomerePropertiesUpd_RT = felineSoleusSarcomerePropertiesDefault;
            felineSoleusNormMuscleCurvesUpd_RT    = felineSoleusNormMuscleCurvesDefault;

        end

    else

        if(felineSoleusSarcomerePropertiesDefault.titinModelType==0)
            felineSoleusNormMuscleCurvesDefault.useTwoSidedTitinCurves=1;
        end    
        felineSoleusNormMuscleCurvesDefault.useCalibratedCurves=useCalibratedCurves;
        flag_useElasticTendon       = 0;
        
        [felineSoleusSarcomerePropertiesUpd_RT,...
            felineSoleusNormMuscleCurvesUpd_RT] = ...
            updateActiveTitinParameters(felineSoleusMusculotendonPropertiesDefault, ...
                                     felineSoleusSarcomerePropertiesDefault,...
                                     felineSoleusNormMuscleCurvesDefault,...
                                     felineSoleusPassiveForceLengthCurveSettings,...
                                     expConfigHerzogLeonard2002,...
                                     flag_useElasticTendon,...
                                     dataFolder,...
                                     flag_fitActiveTitinProperties,...
                                     flag_useOctave);
        
        disp('felineSoleusSarcomerePropertiesUpd_RT');
        fprintf('\t%e\t%s\n',felineSoleusSarcomerePropertiesUpd_RT.normPevkToActinAttachmentPoint,... 
                            'normPevkToActinAttachmentPoint');
        fprintf('\t%e\t%s\n',felineSoleusSarcomerePropertiesUpd_RT.normMaxActiveTitinToActinDamping,... 
                            'normMaxActiveTitinToActinDamping');
    end

end
