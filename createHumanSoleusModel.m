function defaultHumanSoleusModel = createHumanSoleusModel(...
                                      normPevkToActinAttachmentPoint,...
                                      normFiberLengthAtOneNormPassiveForce,...                                      
                                      outputMatFileLocation,...
                                      smallNumericallyNonZeroNumber,...
                                      flag_enableNumericallyNonZeroGradients,...
                                      flag_plotAllCurves,...
                                      flag_useOctave)


%Potential variables to expose
rigidTendonReferenceModel             = [];
elasticTendonReferenceModel           = [];


flag_enableNumericallyNonZeroGradients    = 1;
flag_plotEveryDefaultCurve = 0;




smallNumericallyNonZeroNumber           = sqrt(sqrt(eps));

%%
% Add the directories needed to run this script
%%
parametersDirectoryTreeMTParams     = genpath('parameters');
parametersDirectoryTreeExperiments  = genpath('experiments');
parametersDirectoryTreeModels       = genpath('models');
parametersDirectoryTreeCurves       = genpath('curves');
parametersDirectoryTreeSimulation   = genpath('simulation');

addpath(parametersDirectoryTreeMTParams);
addpath(parametersDirectoryTreeExperiments);
addpath(parametersDirectoryTreeModels);
addpath(parametersDirectoryTreeCurves);
addpath(parametersDirectoryTreeSimulation);

scaleOptimalFiberLength      = 1.0; 
scaleMaximumIsometricTension = 1;



[humanSoleusMusculotendonProperties, ...
 humanSoleusSarcomereProperties] = ...
    createHumanSoleus(  scaleOptimalFiberLength,...
                        scaleMaximumIsometricTension,...
                        normFiberLengthAtOneNormPassiveForce,...
                        normPevkToActinAttachmentPoint,...
                        flag_useOctave);

createMusculoTendonFcn = ...
  @(argScaleFiberLength,argScaleFiso)createHumanSoleus(...
                                        argScaleFiberLength,...
                                        argScaleFiso,...
                                        normFiberLengthAtOneNormPassiveForce,...
                                        normPevkToActinAttachmentPoint,...
                                        flag_useOctave); 
                                        
humanSoleusActiveForceLengthData  = [];
humanSoleusPassiveForceLengthData = [];

%We have no data to fit to, and so these options cannot be used
flag_solveForOptimalFiberLengthOfBestFit         = 0; 
shiftLengthActiveForceLengthCurveDescendingCurve = 0.;

[humanSoleusNormMuscleCurvesDefault,...
 humanSoleusMusculotendonPropertiesDefault,...
 humanSoleusSarcomerePropertiesDefault,... 
 activeForceLengthCurveAnnotationPoints,...
 humanSoleusActiveForceLengthDataDefault,...
 humanSoleusPassiveForceLengthDataDefault,...
 humanSoleusPassiveForceLengthCurveSettings]= ...
    createFittedMuscleCurves( ...
      humanSoleusMusculotendonProperties,...
      humanSoleusSarcomereProperties,...
      humanSoleusActiveForceLengthData,...
      humanSoleusPassiveForceLengthData,...
      shiftLengthActiveForceLengthCurveDescendingCurve,...
      flag_enableNumericallyNonZeroGradients,...
      smallNumericallyNonZeroNumber,...
      flag_solveForOptimalFiberLengthOfBestFit,...
      createMusculoTendonFcn,...
      flag_useOctave);



defaultHumanSoleus = struct('musculotendon',...
                            humanSoleusMusculotendonPropertiesDefault,...
                            'sarcomere',...
                            humanSoleusSarcomerePropertiesDefault,...
                            'falData',...
                            humanSoleusActiveForceLengthDataDefault,...
                            'fpeData',...
                            humanSoleusPassiveForceLengthDataDefault,...
                            'curves',...
                            humanSoleusNormMuscleCurvesDefault);
                      
save(outputMatFileLocation,...
     'defaultHumanSoleus');  

if(flag_plotAllCurves==1)
  figH = plotStructOfBezierSplines( humanSoleusNormMuscleCurvesUpd_ET,...
                                    {'Inverse','use'});                          
end

   

