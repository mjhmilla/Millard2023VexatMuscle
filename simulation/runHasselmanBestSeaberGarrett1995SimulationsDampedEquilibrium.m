function [success] = runHasselmanBestSeaberGarrett1995SimulationsDampedEquilibrium( ...
                          timeSpan,...
                          lengthRampKeyPoints,...
                          stimulationKeyTimes,...
                          flag_useElasticTendon,...
                          flag_useFiberDamping,...
                          fiberDampingCoefficient,...
                          musculotendonProperties,...
                          sarcomereProperties,...
                          normMuscleCurves,...
                          outputFileEndingHill, ...
                          outputFolder,...
                          flag_simulateActiveStretch,...
                          flag_simulatePassiveStretch,...
                          flag_useOctave) 

success = 0;

disp('Running Damped-Equilibrium Hasselman, Best, Seaber, Garrett 1995 Simulations');

lceOpt      = musculotendonProperties.optimalFiberLength;
alphaOpt    = musculotendonProperties.pennationAngle;
ltSlk       = musculotendonProperties.tendonSlackLength;
etOne       = musculotendonProperties.tendonStrainAtOneNormForce;


lengthStart = lengthRampKeyPoints(1,2);
lengthEnd   = lengthRampKeyPoints(2,2);
%%
% Setup the function handles
%%
activation=1;
excitationSquareFcn = @(argT)calcStepFunction(argT,...
                  stimulationKeyTimes(1,1),...
                  stimulationKeyTimes(2,1),...
                  activation);
                
excitationZeroFcn = @(argT)calcStepFunction(argT,...
                  stimulationKeyTimes(1,1),...
                  stimulationKeyTimes(2,1),...
                  0);
                

activationFcn = @(argU,argA)calcFirstOrderActivationDerivative(...
                argU,argA, sarcomereProperties.activationTimeConstant,...
                          sarcomereProperties.deactivationTimeConstant,0);

rampStartTime   = lengthRampKeyPoints(1,1);
rampEndTime     = lengthRampKeyPoints(2,1);            
rampStartLength = lengthRampKeyPoints(1,2);
rampEndLength   = lengthRampKeyPoints(2,2);
                                
rampSlope = (rampEndLength-rampStartLength) ...
         /(rampEndTime-rampStartTime);

pathStartLength = lengthStart;

pathLengthRampFcn = @(argT)calcRampStateSharp(...
                       argT,rampStartTime,rampEndTime,...
                       pathStartLength,rampSlope);
pathLengthStaticFcn = @(argT)calcRampStateSharp(...
                       argT,rampStartTime,rampEndTime,...
                       pathStartLength,0);

%%
% Set up the simulation structs
%%
minActivation=0;
if(flag_useFiberDamping==0)
  minActivation=0.001;
end

dampedFiberElasticTendonConfig.npts          = max(1000, round(timeSpan(1,2)-timeSpan(1,1))*1000);
dampedFiberElasticTendonConfig.relTol        = 1e-6;
dampedFiberElasticTendonConfig.absTol        = 1e-6;
dampedFiberElasticTendonConfig.minActivation = minActivation;
dampedFiberElasticTendonConfig.color0        = [0,0,1].*0.5;
dampedFiberElasticTendonConfig.color1        = [0,0,1];

nStates=0;
labelStates={''};
if(flag_useElasticTendon==1)
  nStates=1;
  labelStates = {'$$\ell_{CE}$$'};
end

dampedFiberElasticTendonConfig.numberOfMuscleStates  = nStates;
dampedFiberElasticTendonConfig.stateLabels = labelStates;
dampedFiberElasticTendonConfig.name                  = '';
dampedFiberElasticTendonConfig.initialState          = [];
dampedFiberElasticTendonConfig.initialActivation     = 0;
dampedFiberElasticTendonConfig.pathFcn               = [];
dampedFiberElasticTendonConfig.excitationFcn         = [];
dampedFiberElasticTendonConfig.activationFcn         = activationFcn; 
dampedFiberElasticTendonConfig.tspan                 = timeSpan;  

dampedFiberElasticTendonConfig.useFiberDamping  = flag_useFiberDamping;
dampedFiberElasticTendonConfig.useElasticTendon = flag_useElasticTendon;
dampedFiberElasticTendonConfig.damping          = fiberDampingCoefficient;
dampedFiberElasticTendonConfig.iterMax          = 100;
dampedFiberElasticTendonConfig.tol              = 1e-6;

calcDampedFiberElasticTendonMuscleInfoFcn =...
    @(actState1,pathState2,mclState3)...
    calcMillard2012DampedEquilibriumMuscleInfo(  ...
                                actState1,...
                                pathState2, ... 
                                mclState3,...                                                                           
                                musculotendonProperties,...
                                normMuscleCurves,...
                                dampedFiberElasticTendonConfig);   

calcDampedFiberElasticTendonInitialMuscleStateFcn = ...
    @(actState1,pathState2,calcMuscleInfo3, initConfig4) ...
        calcInitialMuscleState(actState1,...
                               pathState2,...
                               musculotendonProperties,...
                               calcMuscleInfo3,...
                               initConfig4);


dampedFiberElasticTendonConfig.numberOfMuscleStates = nStates;
dampedFiberElasticTendonConfig.name = 'DFE';
dampedFiberElasticTendonConfig.eventFcn = [];

flag_appendEnergetics =0;
numberOfSimulations = flag_simulateActiveStretch...
                    + flag_simulatePassiveStretch;            

benchRecord = [];
idx = 1;
if(flag_simulateActiveStretch == 1)
  dampedFiberElasticTendonConfig.initialActivation     = 1;    
  dampedFiberElasticTendonConfig.pathFcn       = pathLengthRampFcn;
  dampedFiberElasticTendonConfig.excitationFcn = excitationSquareFcn;
  benchRecord = runPrescribedLengthActivationSimulation(...
                 calcDampedFiberElasticTendonMuscleInfoFcn,...
                 calcDampedFiberElasticTendonInitialMuscleStateFcn,...
                 dampedFiberElasticTendonConfig,...
                 benchRecord,...
                 idx, numberOfSimulations,...
                 flag_appendEnergetics,...
                 flag_useOctave);   
  fprintf('%i / %i\n', idx, numberOfSimulations); 
  idx=idx+1;
end

if(flag_simulatePassiveStretch == 1)
  dampedFiberElasticTendonConfig.initialActivation     = 0;        
  dampedFiberElasticTendonConfig.pathFcn               = pathLengthRampFcn;
  dampedFiberElasticTendonConfig.excitationFcn         = excitationZeroFcn;
  benchRecord = runPrescribedLengthActivationSimulation(...
                 calcDampedFiberElasticTendonMuscleInfoFcn,...
                 calcDampedFiberElasticTendonInitialMuscleStateFcn,...
                 dampedFiberElasticTendonConfig,...
                 benchRecord,...
                 idx, numberOfSimulations,...
                 flag_appendEnergetics,...
                 flag_useOctave); 
  fprintf('%i / %i\n', idx, numberOfSimulations); 
  idx=idx+1;
end
                  
nameModification = '';
if(dampedFiberElasticTendonConfig.useElasticTendon == 1)
  nameModification = 'ElasticTendon';
else
  nameModification = 'RigidTendon';          
end

modelName = 'benchRecordHill_';

save([outputFolder,modelName,outputFileEndingHill,'.mat'],...
'benchRecord',...
'timeSpan',...
'lengthRampKeyPoints',...
'stimulationKeyTimes',...
'flag_useElasticTendon',...
'musculotendonProperties',...
'sarcomereProperties',...
'normMuscleCurves');

success=1;



