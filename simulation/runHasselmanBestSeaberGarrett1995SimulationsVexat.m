%%
% SPDX-FileCopyrightText: 2023 Matthew Millard <millard.matthew@gmail.com>
%
% SPDX-License-Identifier: MIT
%
% If you use this code in your work please cite the pre-print of this paper
% or the most recent peer-reviewed version of this paper:
%
%    Matthew Millard, David W. Franklin, Walter Herzog. 
%    A three filament mechanistic model of musculotendon force and impedance. 
%    bioRxiv 2023.03.27.534347; doi: https://doi.org/10.1101/2023.03.27.534347 
%
%%

function [success] = runHasselmanBestSeaberGarrett1995SimulationsVexat(...
                          timeSpan,...
                          lengthRampKeyPoints,...
                          stimulationKeyTimes,...
                          flag_useElasticTendon,...
                          musculotendonProperties,...
                          sarcomereProperties,...
                          normMuscleCurves,...
                          outputFileEndingVexat, ...
                          outputFolder,...
                          flag_simulateActiveStretch,...
                          flag_simulatePassiveStretch,...
                          flag_useOctave)

lceOpt      = musculotendonProperties.optimalFiberLength;
alphaOpt    = musculotendonProperties.pennationAngle;
ltSlk       = musculotendonProperties.tendonSlackLength;
etOne       = musculotendonProperties.tendonStrainAtOneNormForce;


lengthStart = lengthRampKeyPoints(1,2);
lengthEnd   = lengthRampKeyPoints(2,2);
%%
% Setup the function handles
%%
activation=1;
excitationSquareFcn = @(argT)calcStepFunction(argT,...
                  stimulationKeyTimes(1,1),...
                  stimulationKeyTimes(2,1),...
                  activation);
                
excitationZeroFcn = @(argT)calcStepFunction(argT,...
                  stimulationKeyTimes(1,1),...
                  stimulationKeyTimes(2,1),...
                  0);
                

activationFcn = @(argU,argA)calcFirstOrderActivationDerivative(...
                argU,argA, sarcomereProperties.activationTimeConstant,...
                          sarcomereProperties.deactivationTimeConstant,0);

rampStartTime   = lengthRampKeyPoints(1,1);
rampEndTime     = lengthRampKeyPoints(2,1);            
rampStartLength = lengthRampKeyPoints(1,2);
rampEndLength   = lengthRampKeyPoints(2,2);
                                
rampSlope = (rampEndLength-rampStartLength) ...
         /(rampEndTime-rampStartTime);

pathStartLength = lengthStart;

pathLengthRampFcn = @(argT)calcRampStateSharp(...
                       argT,rampStartTime,rampEndTime,...
                       pathStartLength,rampSlope);
pathLengthStaticFcn = @(argT)calcRampStateSharp(...
                       argT,rampStartTime,rampEndTime,...
                       pathStartLength,0);

%%
% Set up the simulation structs
%%
benchConfig.npts                  = max(1000, round(timeSpan(1,2)-timeSpan(1,1))*1000);
benchConfig.relTol                = 1e-6;
benchConfig.absTol                = 1e-6;
benchConfig.minActivation         = 0;
benchConfig.color0                = [0,0,1].*0.5;
benchConfig.color1                = [0,0,1];

nStates = 0;
labelStates = {''};
if(flag_useElasticTendon==1)
  nStates = 4;
  labelStates= {'$$\ell_{CE}$$','$$\dot{\ell}_{a}$$',...
     '$$\ell_{a}$$','$$\ell_1$$'};%,'$$f_{e}^1$$', '$$f_{e}^2$$'};
else
  nStates = 3;
  labelStates= {'$$\dot{\ell}_{a}$$',...
     '$$\ell_{a}$$','$$\ell_1$$'};%,'$$f_{e}^1$$', '$$f_{e}^2$$'};            
end

benchConfig.numberOfMuscleStates  = nStates;
benchConfig.stateLabels  = labelStates;
benchConfig.name                  = '';
benchConfig.initialState          = [];
benchConfig.initialActivation     = 0;
benchConfig.pathFcn               = [];
benchConfig.excitationFcn         = [];
benchConfig.activationFcn         = activationFcn; 
benchConfig.tspan                 = timeSpan;  

benchConfig.useFiberDamping  = 1;
benchConfig.useElasticTendon = flag_useElasticTendon;
benchConfig.damping          = 0.1;
benchConfig.iterMax          = 100;
benchConfig.tol              = 1e-6;

loopTolerance = min(benchConfig.relTol,benchConfig.absTol)/100;

modelConfig = struct( ...
  'iterMax'                 , 100             , ...
  'tol'                     , loopTolerance   , ... 
  'tolInit'                 , sqrt(eps)       , ...
  'minActivation'           , 0.0             , ...
  'useElasticTendon'        , flag_useElasticTendon , ...
  'initializeState'         , 0                     );          

modelConfig.initializeState =1;
activationState0 = [0;excitationSquareFcn(0)];
pathState0 = pathLengthRampFcn(0);
muscleState0 = zeros(nStates,1);
mtInfo =calcMillard2023VexatMuscleInfo(activationState0,...
                                        pathState0,...
                                        muscleState0,...
                                        musculotendonProperties,...
                                        sarcomereProperties,...
                                        normMuscleCurves,...
                                        modelConfig);
muscleState0                = mtInfo.state.value;
modelConfig.initializeState = 0;           

benchConfig.numberOfMuscleStates = length(muscleState0);
benchConfig.initialState         = muscleState0;

benchConfig.minimumActivation    = 0;
benchConfig.name                 = 'Vexat';
benchConfig.eventFcn             = [];            


calcMillard2023VexatMuscleInfoFcn = ...
     @(activationState1,pathState2,mclState3) ...
     calcMillard2023VexatMuscleInfo(   activationState1,...
                                        pathState2,...
                                        mclState3,...
                                        musculotendonProperties,...
                                        sarcomereProperties,...
                                        normMuscleCurves,...
                                        modelConfig);

flag_appendEnergetics =0;
numberOfSimulations = flag_simulateActiveStretch...
                    + flag_simulatePassiveStretch;

benchRecord = [];
idx = 1;
if(flag_simulateActiveStretch == 1)
 benchConfig.initialActivation     = 1;
 benchConfig.pathFcn               = pathLengthRampFcn;
 benchConfig.excitationFcn         = excitationSquareFcn;             
 benchRecord = runPrescribedLengthActivationSimulation(...
                               calcMillard2023VexatMuscleInfoFcn,...
                               [],...
                               benchConfig,...
                               benchRecord,...
                               idx, numberOfSimulations,...
                               flag_appendEnergetics,...
                               flag_useOctave);
 fprintf('%i / %i\n', idx, numberOfSimulations);                            
 idx=idx+1;
end


if(flag_simulatePassiveStretch == 1)
 benchConfig.initialActivation      = 0; 
  benchConfig.pathFcn               = pathLengthRampFcn;
  benchConfig.excitationFcn         = excitationZeroFcn;
  benchRecord = runPrescribedLengthActivationSimulation(...
                               calcMillard2023VexatMuscleInfoFcn,...
                               [],...
                               benchConfig,...
                               benchRecord,...
                               idx, numberOfSimulations,...
                               flag_appendEnergetics,...
                               flag_useOctave);
  fprintf('%i / %i\n', idx, numberOfSimulations);                           
  idx=idx+1;
end  

nameModification = '';
if(benchConfig.useElasticTendon == 1)
    nameModification = 'ElasticTendon';
else
    nameModification = 'RigidTendon';          
end



 save([outputFolder,'benchRecordVexat_',outputFileEndingVexat,'.mat'],...
    'benchRecord',...
    'timeSpan',...
    'lengthRampKeyPoints',...
    'stimulationKeyTimes',...
    'flag_useElasticTendon',...
    'musculotendonProperties',...
    'sarcomereProperties',...
    'normMuscleCurves');

 success=1;