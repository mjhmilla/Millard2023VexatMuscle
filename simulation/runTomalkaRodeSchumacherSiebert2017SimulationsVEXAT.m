function [success] = runTomalkaRodeSchumacherSiebert2017SimulationsVEXAT( ...
                          timeSpan,...
                          excitationFcn,...
                          activationFcn,...
                          pathLengthFcn,...
                          musculotendonProperties,...
                          sarcomereProperties,...
                          normMuscleCurves,...
                          flag_fitTitinModel,...
                          outputFilePath)

disp('Running VEXAT model on Tomalka, Rode, Schumacher Siebert 2017');

%%
% Initialize the model's state appropriately
%%
assert(musculotendonProperties.tendonSlackLength==0,...
        ['Error: This is a simulation of a muscle',...
        ' fiber: tendonSlackLength should be 0']);
assert(musculotendonProperties.pennationAngle==0,...
        ['Error: This is a simulation of a muscle',...
        ' fiber: pennationAngle should be 0']);




%%          
% Setup the simulation structs
%%   

%
% Bench config
%
benchConfig.npts                  = round(timeSpan(1,2)-timeSpan(1,1))*100;
benchConfig.relTol                = 1e-6;
benchConfig.absTol                = 1e-6;
benchConfig.minActivation         = 0;
benchConfig.color0                = [0,0,1].*0.5;
benchConfig.color1                = [0,0,1];

nStates     = 3;
labelStates = {'$$\dot{\ell}_{a}$$', '$$\ell_{a}$$', '$$\ell_1$$'};       

benchConfig.numberOfMuscleStates  = nStates;
benchConfig.stateLabels           = labelStates;
benchConfig.name                  = '';
benchConfig.initialState          = [];
benchConfig.initialActivation     = 0;
benchConfig.pathFcn               = [];
benchConfig.excitationFcn         = [];
benchConfig.activationFcn         = activationFcn; 
benchConfig.tspan                 = timeSpan;  

benchConfig.useFiberDamping  = 1;
benchConfig.useElasticTendon = 0;
benchConfig.damping          = 0.1;
benchConfig.iterMax          = 100;
benchConfig.tol              = 1e-6;

loopTolerance = min(benchConfig.relTol,benchConfig.absTol)/100;

%
% Initialization 
%

modelConfig = struct( ...
  'iterMax'                 , 100             , ...
  'tol'                     , loopTolerance   , ... 
  'tolInit'                 , sqrt(eps)       , ...
  'minActivation'           , 0.0             , ...
  'useElasticTendon'        , 0 , ...
  'initializeState'         , 0                     );  

modelConfig.initializeState =1;
activationState0    = [0;excitationFcn(0)];
pathState0          = pathLengthFcn(0);
muscleState0        = zeros(nStates,1);
mtInfo = calcMillard2023VexatMuscleInfo(activationState0,...
                                        pathState0,...
                                        muscleState0,...
                                        musculotendonProperties,...
                                        sarcomereProperties,...
                                        normMuscleCurves,...
                                        modelConfig);
muscleState0                = mtInfo.state.value;
modelConfig.initializeState = 0;           

benchConfig.numberOfMuscleStates = length(muscleState0);
benchConfig.initialState         = muscleState0;

benchConfig.minimumActivation    = 0;
benchConfig.name                 = 'Vexat';
benchConfig.eventFcn             = [];            

calcMillard2023VexatMuscleInfoFcn = ...
     @(activationState1,pathState2,mclState3) ...
     calcMillard2023VexatMuscleInfo(    activationState1,...
                                        pathState2,...
                                        mclState3,...
                                        musculotendonProperties,...
                                        sarcomereProperties,...
                                        normMuscleCurves,...
                                        modelConfig);

%
% Run the simulation
%
idx                     = 1;
numberOfSimulations     = 1;
benchRecord             = [];
flag_appendEnergetics   = 0;
flag_useOctave          = 0;

benchConfig.pathFcn               = pathLengthFcn;
benchConfig.excitationFcn         = excitationFcn;             
benchRecord = runPrescribedLengthActivationSimulation(...
                           calcMillard2023VexatMuscleInfoFcn,...
                           [],...
                           benchConfig,...
                           benchRecord,...
                           idx, ...
                           numberOfSimulations,...
                           flag_appendEnergetics,...
                           flag_useOctave);
fprintf('%i / %i\n', idx, numberOfSimulations);                            
idx=idx+1;


 save(outputFilePath,...
    'benchRecord',...
    'timeSpan',...
    'musculotendonProperties',...
    'sarcomereProperties',...
    'normMuscleCurves');

success=1;
